---------------
 Exercise: 001
---------------

Write a Numpy program to get the Numpy version and show the Numpy build configuration.

==============================================================================
---------------
 Exercise: 002
---------------

Write a NumPy program to get help with the add function.

==============================================================================
---------------
 Exercise: 003
---------------

Write a NumPy program to test whether none of the elements of a given array are zero.

np.array([1, 2, 3, 4])  ->  True
np.array([0, 1, 2, 3])  ->  False

==============================================================================
---------------
 Exercise: 004
---------------

Write a NumPy program to test if any of the elements of a given array are non-zero.

np.array([1, 2, 3, 4])  ->  True
np.array([0, 1, 2, 3])  ->  True
np.array([0, 0])        ->  False

==============================================================================
---------------
 Exercise: 005
---------------

Write a NumPy program to test a given array element-wise for finiteness (not infinity or not a number).

np.array([-np.inf, 1, 0, np.nan, np.inf])   ->  [False  True  True False False]

==============================================================================
---------------
 Exercise: 006
---------------

Write a NumPy program to test elements-wise for positive or negative infinity.

np.array([-np.inf, 1, 0, np.nan, np.inf])       ; inf/-inf      ->  [ True False False False  True]
                                                ; inf           ->  [False False False False  True]
                                                ; -inf          ->  [ True False False False False]

==============================================================================
---------------
 Exercise: 007
---------------

Write a NumPy program to test element-wise for NaN of a given array.

np.array([-np.inf, 1, 0, np.nan, np.inf])   ->  [False False False  True False]

==============================================================================
---------------
 Exercise: 008
---------------

Write a NumPy program to test element-wise for complex numbers, real numbers in a given array.

    np.array([1+1j, 1+0j, 4.5, 3, 2, 2j])

        Complex mask:       [ True False False False False  True]
        Real mask:          [False  True  True  True  True False]

Also test if a given input is of an array scalar or not.

        3.1     ->  True
        [3.1]   ->  False
        []      ->  False

==============================================================================
---------------
 Exercise: 009
---------------

Write a NumPy program to test whether two arrays are element-wise equal within a tolerance.

    [1e10, 1e-7], [1.00001e10, 1e-8]        -> False
    [1e10, 1e-8], [1.00001e10, 1e-9]        -> True
    [1e10, 1e-8], [1.0001e10, 1e-9]         -> False
    [1.0, np.nan], [1.0, np.nan]            -> False    (Considering 'nan's unequal)
    [1.0, np.nan], [1.0, np.nan]            -> True     (Considering 'nan's equal)

Note: Use the NumPy default settings for the absolute/relative tolerance values (atol=1e-08, rtol=1e-05)

==============================================================================
---------------
 Exercise: 010
---------------

Write a NumPy program to create an element-wise comparison (greater, greater_equal, less and less_equal) of two given
arrays.

np.array([3, 5]), np.array([2, 5])

    greater         ->  [ True False]
    greater_equal   ->  [ True  True]

    less            ->  [False False]
    less_equal      ->  [False  True]

==============================================================================
---------------
 Exercise: 011
---------------

Write a NumPy program to create an element-wise comparison (equal, equal within a tolerance) of two given arrays.

np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100])
np.array([72, 79, 85, 90, 150, -135, 120, -10, 60, 100.000001])

    equal:                      [ True  True  True  True  True  True  True  True  True False]
    equal with a tolerance:     [ True  True  True  True  True  True  True  True  True  True]

Note: Use the NumPy default settings for the absolute/relative tolerance values (atol=1e-08, rtol=1e-05)

==============================================================================
---------------
 Exercise: 012
---------------

Write a NumPy program to create an array with the values 1, 7, 13, 105 and determine the size of the memory occupied
by the array.

Total array size:   32 bytes  (64-bit machine)

==============================================================================
---------------
 Exercise: 013
---------------

Write a NumPy program to create an array of 10 zeros, 10 ones, and 10 fives (of int64 type).

[0 0 0 0 0 0 0 0 0 0 1 1 1 1 1 1 1 1 1 1 5 5 5 5 5 5 5 5 5 5]

==============================================================================
---------------
 Exercise: 014
---------------

Write a NumPy program to create an array of integers from 30 to 70.

[30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53
 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70]

==============================================================================
---------------
 Exercise: 015
---------------

Write a NumPy program to create an array of all even integers from 30 to 70.

[30 32 34 36 38 40 42 44 46 48 50 52 54 56 58 60 62 64 66 68 70]

==============================================================================
---------------
 Exercise: 016
---------------

Write a NumPy program to create a 3x3 identity matrix.

[[1 0 0]
 [0 1 0]
 [0 0 1]]

==============================================================================
---------------
 Exercise: 017
---------------

Write a NumPy program to generate a random number uniformly distributed over the range [0, 1).

Note: For reproducibility, use the following seed: '0x22ca5f1939e020a9b9af01ce3d98b7fa'

-> 0.4191924645728484

==============================================================================
---------------
 Exercise: 018
---------------

Write a NumPy program to generate an array of 15 random numbers from a standard normal distribution.

Note: For reproducibility, use the following seed: '0x22ca5f1939e020a9b9af01ce3d98b7fa'

[-0.11869655  1.69591506 -0.14144756  0.82393334 -0.25081425 -2.14130281
  0.94833402  0.67673572 -0.88364139  1.32003527 -0.17065957 -0.51081071
  0.49089871  0.55615951 -0.99268387]

==============================================================================
---------------
 Exercise: 019
---------------

Write a NumPy program to create a vector with values ranging from 15 to 55 and print all values except the first and last.

[16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39
 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54]

==============================================================================
---------------
 Exercise: 020
---------------

Write a NumPy program to create a 3x4 array (ranging from 0 to 11) and iterate over it.

[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]]

(0, 0) 0
(0, 1) 1
(0, 2) 2
(0, 3) 3
(1, 0) 4
(1, 1) 5
(1, 2) 6
(1, 3) 7
(2, 0) 8
(2, 1) 9
(2, 2) 10
(2, 3) 11

==============================================================================
---------------
 Exercise: 021
---------------

Write a NumPy program to create a vector of length 10 with values evenly distributed between 5 and 50.

[ 5. 10. 15. 20. 25. 30. 35. 40. 45. 50.]

==============================================================================
---------------
 Exercise: 022
---------------

Write a NumPy program to create a vector with values from 0 to 20 and change the sign of the numbers in the range
from 9 to 15.

[  0   1   2   3   4   5   6   7   8  -9 -10 -11 -12 -13 -14 -15  16  17
  18  19  20]

==============================================================================
---------------
 Exercise: 023
---------------

Write a NumPy program to create a vector of length 5 filled with arbitrary integers from 0 to 10.

Note: For reproducibility, use the following seed: '0x22ca5f1939e020a9b9af01ce3d98b7fa'

[0 4 6 6 1]

==============================================================================
---------------
 Exercise: 024
---------------

Write a NumPy program to multiply the values (element-wise) of two given vectors.

np.array([1, 8, 3, 5])
np.array([1, 6, 4, 6])

    -> [ 1 48 12 30]

==============================================================================
---------------
 Exercise: 025
---------------

Write a NumPy program to create a 3x4 matrix filled with values from 10 to 21.

[[10 11 12 13]
 [14 15 16 17]
 [18 19 20 21]]

==============================================================================
---------------
 Exercise: 026
---------------

Write a NumPy program to find the number of rows and columns in a given matrix.

np.array([[ 0,  1,  2,  3,  4,  5,  6,  7],
          [ 8,  9, 10, 11, 12, 13, 14, 15],
          [16, 17, 18, 19, 20, 21, 22, 23]])

-> (3, 8)

==============================================================================
---------------
 Exercise: 027
---------------

Write a NumPy program to create a 10x10 matrix, in which the elements on the borders will be equal to 1, and inside 0.

[[1 1 1 1 1 1 1 1 1 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 0 0 0 0 0 0 0 0 1]
 [1 1 1 1 1 1 1 1 1 1]]

==============================================================================
---------------
 Exercise: 028
---------------

Write a NumPy program to create a 5x5 zero matrix with elements on the main diagonal equal to 1, 2, 3, 4, 5.

[[1 0 0 0 0]
 [0 2 0 0 0]
 [0 0 3 0 0]
 [0 0 0 4 0]
 [0 0 0 0 5]]

==============================================================================
---------------
 Exercise: 029
---------------

Write a NumPy program to create a 4x4 matrix in which 0 and 1 are staggered, with zeros on the main diagonal.

[[0 1 0 1]
 [1 0 1 0]
 [0 1 0 1]
 [1 0 1 0]]

==============================================================================
---------------
 Exercise: 030
---------------

Write a NumPy program to create a 3x3x3 array of int8 datatype, filled with arbitrary values.

[[[ 32   0  70]
  [  0 105   0]
  [108   0 101]]

 [[  0 115   0]
  [ 32   0  40]
  [  0 120   0]]

 [[ 56   0  54]
  [  0  41   0]
  [ 92   0  67]]]

Note: the above result may vary, and depends on what was found in the memory.

==============================================================================
---------------
 Exercise: 031
---------------

Write a NumPy program to, given a 2d array, compute:
    * the sum of all elements,
    * the sum of each column, and
    * the sum of each row

array([[4, 3, 6, 0, 5, 4],
       [6, 2, 7, 5, 0, 4],
       [5, 9, 4, 0, 4, 3],
       [1, 1, 8, 1, 2, 8],
       [2, 8, 1, 1, 3, 3]])

sum of all elements: 110
sum of each column: [18 23 26  7 14 22]
sum of each row: [22 24 25 21 18]

==============================================================================
---------------
 Exercise: 032
---------------

Write a NumPy program to compute the inner product of two given vectors.

x = np.array([4, 5])
y = np.array([7, 10])

-> 78

==============================================================================
---------------
 Exercise: 033
---------------

Write a NumPy program to add a vector to each row of a given matrix.

The input matrix:
array([[4, 3, 6, 0, 5, 4],
       [6, 2, 7, 5, 0, 4],
       [5, 9, 4, 0, 4, 3],
       [1, 1, 8, 1, 2, 8],
       [2, 8, 1, 1, 3, 3]])

The input vector:
array([ 3,  2,  2, -2, -1, -1])

out:
[[ 7  5  8 -2  4  3]
 [ 9  4  9  3 -1  3]
 [ 8 11  6 -2  3  2]
 [ 4  3 10 -1  1  7]
 [ 5 10  3 -1  2  2]]

==============================================================================
---------------
 Exercise: 034
---------------

Write a NumPy program to save a random 3x3 integer array to a binary file and reload it.

==============================================================================
---------------
 Exercise: 035
---------------

Write a NumPy program to save two random arrays (3x3 ints in the range [-4, 5), 5x4 floats in the range [-2, 2)) to
a binary file and reload them.

==============================================================================
---------------
 Exercise: 036
---------------

Write a NumPy program to save a random 6x4 float32 array (values are in [-5, 5)) to a text file and load it.

==============================================================================
---------------
 Exercise: 037
---------------

Write a NumPy program to convert a 2x2 random int8 array into bytes, and load it as an array.

==============================================================================
---------------
 Exercise: 038
---------------

Write a NumPy program to convert a given list into an array, then again convert it into a list.

Check initial list and final list are equal or not.

Input list:     [[1, 2], [3, 4], [5, 6]]

==============================================================================
---------------
 Exercise: 039
---------------

Write a NumPy/Matplotlib program to visualize sin/cos of angles in the range [-2π, 2π].

==============================================================================
---------------
 Exercise: 040
---------------

Write a NumPy program to get native python items from numpy arrays.

==============================================================================
---------------
 Exercise: 041
---------------

Write a NumPy program to conditionally add elements in a given 2d array .

If an element in the matrix is 0, we will not add the element below this element.

np.array([[1, 1, 0, 2],
          [0, 3, 0, 3],
          [1, 0, 4, 4]])

-> 14 (exclude the first/third numbers in the last row since the number above are zeros)

==============================================================================
---------------
 Exercise: 042
---------------

Write a NumPy program to check whether two arrays are equal (element wise) or not.

np.array([0.5, 1.5, 0.2]), np.array([0.4999999999, 1.500000000, 0.2])           -> True

np.array([1, 2, 3]), np.array([1, 2, 3])                                        -> True

np.array([1, 2, 3]), np.array([1, 0, 3])                                        -> False

==============================================================================
---------------
 Exercise: 043
---------------

Write a NumPy program to create the following arrays:

a:  [0 1 2 3 4 5 6 7 8 9]
b:  [10 30 50 70 90]
c   [ 100  200  300  400  500  600  700  800  900 1000]

==============================================================================
---------------
 Exercise: 044
---------------

Write a NumPy program to create the following two-dimensional array:

[[  1   2   3   4   5   6   7   8   9  10]
 [ 11  12  13  14  15  16  17  18  19  20]
 [ 21  22  23  24  25  26  27  28  29  30]
 [ 31  32  33  34  35  36  37  38  39  40]
 [ 41  42  43  44  45  46  47  48  49  50]
 [ 51  52  53  54  55  56  57  58  59  60]
 [ 61  62  63  64  65  66  67  68  69  70]
 [ 71  72  73  74  75  76  77  78  79  80]
 [ 81  82  83  84  85  86  87  88  89  90]
 [ 91  92  93  94  95  96  97  98  99 100]
 [101 102 103 104 105 106 107 108 109 110]
 [111 112 113 114 115 116 117 118 119 120]
 [121 122 123 124 125 126 127 128 129 130]
 [131 132 133 134 135 136 137 138 139 140]
 [141 142 143 144 145 146 147 148 149 150]]

==============================================================================
---------------
 Exercise: 045
---------------

Write a NumPy program to create a one-dimensional array of 10 pseudo-randomly generated values.
Select random numbers from a uniform distribution between 0 and 1.

[0.18138628 0.663765   0.70319871 0.20134926 0.58369598 0.81176808
 0.34364489 0.10186336 0.0698783  0.11933338]

==============================================================================
---------------
 Exercise: 046
---------------

Write a NumPy program to create a two-dimensional array with shape (100, 100) of random numbers.
Select random numbers from a normal distribution (200, 7).

==============================================================================
---------------
 Exercise: 047
---------------

Write a NumPy program to generate a uniform, non-uniform random sample (5 items) from a given 1-D array with and without replacement.

seed: 0x334e44660545dba1cf3d6fd46941b63
population: [0 1 2 3 4 5 6 7 8 9]

uniform sampling:
    a sample of 7 items without replacement:    [3 4 0 5 7 1 9]
    a sample of 7 items with replacement:       [1 5 6 8 8 9 3]

non-uniform sampling:
    sampling probability of each item: [0.0 0.0 0.0 0.0 0.0 0.5 0.0 0.0 0.5 0.0]
    a sample of 2 items without replacement:    [8 5]
    a sample of 7 items with replacement:       [5 5 5 5 5 5 8]

==============================================================================
---------------
 Exercise: 048
---------------

Write a NumPy program to create a 4x4 array with random values.

[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]

Create an array from the said array swapping first and last rows.

[[12 13 14 15]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [ 0  1  2  3]]

==============================================================================
---------------
 Exercise: 049
---------------

Write a NumPy program to create a new integer array of shape (5, 6) filled with zeros.

[[0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]
 [0 0 0 0 0 0]]

==============================================================================
---------------
 Exercise: 050
---------------

Write a NumPy program to sort a given array by row and column in ascending order.

array([[22, 15, 14, 16,  9, 18],
       [ 3, 20, 11, 17, 23,  6],
       [21,  5, 12,  0,  8, 19],
       [ 1, 13, 10,  2,  7,  4]])

sorted by row:
[[ 9 14 15 16 18 22]
 [ 3  6 11 17 20 23]
 [ 0  5  8 12 19 21]
 [ 1  2  4  7 10 13]]

sorted by column:
[[ 1  5 10  0  7  4]
 [ 3 13 11  2  8  6]
 [21 15 12 16  9 18]
 [22 20 14 17 23 19]]

==============================================================================
---------------
 Exercise: 051
---------------

Write a NumPy program to extract all numbers from a given array less and greater than a specified number.

np.array([[5.54, 3.38, 7.99],
          [3.54, 4.38, 6.99],
          [1.54, 2.39, 9.29]])

> 5     -> [5.54 7.99 6.99 9.29]
< 6     -> [5.54 3.38 3.54 4.38 1.54 2.39]

==============================================================================
---------------
 Exercise: 052
---------------

Write a NumPy program to replace all numbers in a given array equal, less and greater than a given number.

np.array([[5.54, 3.38, 7.99],
          [3.54, 4.38, 6.99],
          [1.54, 2.39, 9.29]])

numbers > 6 are replaced with positive infinity
numbers < 3 are replaced with negative infinity

[[5.54 3.38  inf]
 [3.54 4.38  inf]
 [-inf -inf  inf]]

==============================================================================
---------------
 Exercise: 053
---------------

Write a NumPy program to create an array of equal shape and data type for a given array.

The input array:
[[ 0  1  2  3  4]
 [ 5  6  7  8  9]
 [10 11 12 13 14]
 [15 16 17 18 19]
 [20 21 22 23 24]]

 Output array: the same shape/type as the input array filled with 5s
[[5 5 5 5 5]
 [5 5 5 5 5]
 [5 5 5 5 5]
 [5 5 5 5 5]
 [5 5 5 5 5]]

==============================================================================
---------------
 Exercise: 054
---------------

Write a NumPy program to create a three-dimensional array with the shape (3,5,4) and set it to a variable.

[[[5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]]

 [[5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]]

 [[5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]
  [5 5 5 5]]]

==============================================================================
---------------
 Exercise: 055
---------------

Write a NumPy program to create a 4x4 array.

[[ 0  1  2  3]
 [ 4  5  6  7]
 [ 8  9 10 11]
 [12 13 14 15]]

Create an array from said array by swapping first and last, second and third columns.

[[ 3  2  1  0]
 [ 7  6  5  4]
 [11 10  9  8]
 [15 14 13 12]]

==============================================================================
---------------
 Exercise: 056
---------------

Write a NumPy program to swap rows and columns of a given array in reverse order.

[[ 0  1  2  3  4  5]
 [ 6  7  8  9 10 11]
 [12 13 14 15 16 17]
 [18 19 20 21 22 23]]

[[23 22 21 20 19 18]
 [17 16 15 14 13 12]
 [11 10  9  8  7  6]
 [ 5  4  3  2  1  0]]

==============================================================================
---------------
 Exercise: 057
---------------

Write a NumPy program to multiply two given arrays of the same size element-by-element.

np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
np.array([[2, 0, 4], [5, 0, 3], [4, 0, 10]])

[[ 2  0 12]
 [20  0 18]
 [28  0 90]]

==============================================================================
