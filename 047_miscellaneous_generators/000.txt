---------------
 Exercise: 001
---------------

Write a Python program that creates a generator function that yields cubes of numbers from 1 to n.
Accept n from the user.

==============================================================================
---------------
 Exercise: 002
---------------

Write a Python program to implement a generator that generates random numbers within a given range.

==============================================================================
---------------
 Exercise: 003
---------------

Write a Python program that creates a generator function that generates all prime numbers between two given numbers.

0 - 100: [2, 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79, 83, 89, 97]

==============================================================================
---------------
 Exercise: 004
---------------

Write a Python program to implement a generator function that generates the Fibonacci sequence.

first 20 fib numbers: [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377, 610, 987, 1597, 2584, 4181]

==============================================================================
---------------
 Exercise: 005
---------------

Write a Python program to implement a generator function that generates all permutations of a given list of elements.

[1, 2]      =>  [(1, 2), (2, 1)]
[1, 2, 3]   =>  [(1, 2, 3), (1, 3, 2), (2, 1, 3), (2, 3, 1), (3, 1, 2), (3, 2, 1)]

==============================================================================
---------------
 Exercise: 006
---------------

Write a Python program to implement a generator that yields all possible combinations of a given list of elements.

[1, 2, 3, 4], 3     =>  [(1, 2, 3), (1, 2, 4), (1, 3, 4), (2, 3, 4)]
[1, 2, 3, 4], 4     =>  [(1, 2, 3, 4)]

==============================================================================
---------------
 Exercise: 007
---------------

Write a Python program to implement a generator that generates the Collatz sequence for a given number.

The Collatz sequence, also known as the Collatz conjecture or 3n+1 problem, is a sequence of numbers defined by the
following rules:
    * Start with any positive integer n.
    * If n is even, divide it by 2 to get n/2.
    * If n is odd, multiply it by 3 and add 1 to get 3n+1.
    * Repeat the process, using the resulting number, until you reach the number 1.

For instance, starting with n = 12 and applying the function f without "shortcut", one gets the sequence
    12, 6, 3, 10, 5, 16, 8, 4, 2, 1.

The number n = 19 takes longer to reach 1:
    19, 58, 29, 88, 44, 22, 11, 34, 17, 52, 26, 13, 40, 20, 10, 5, 16, 8, 4, 2, 1.

==============================================================================
---------------
 Exercise: 008
---------------

Write a Python program that creates a generator function that generates the next palindrome number after a given number.

0       =>  1
11      =>  22
55      =>  66
99      =>  101
112     =>  121

==============================================================================
---------------
 Exercise: 009
---------------

Write a Python program that creates a generator that generates all prime factors of a given number.

1729        =>  [7, 13, 19]
8763        =>  [3, 23, 127]
36          =>  [2, 3]

==============================================================================
---------------
 Exercise: 010
---------------

Write a Python program that creates a generator function that generates all prime numbers between two given numbers.

1, 30       =>  [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]
100, 200    =>  [101, 103, 107, 109, 113, 127, 131, 137, 139, 149, 151, 157, 163, 167, 173, 179, 181, 191, 193, 197, 199]

==============================================================================
---------------
 Exercise: 011
---------------

Write a Python program to create a generator that generates all possible permutations of a string.

abc     =>  abc, acb, bac, bca, cab, cba

print   =>  print, pritn, prnit, prnti, prtin, prtni, pirnt, pirtn, pinrt, pintr, pitrn, pitnr, pnrit, pnrti, pnirt,
            pnitr, pntri, pntir, ptrin, ptrni, ptirn, ptinr, ptnri, ptnir, rpint, rpitn, rpnit, rpnti, rptin, rptni,
            ripnt, riptn, rinpt, rintp, ritpn, ritnp, rnpit, rnpti, rnipt, rnitp, rntpi, rntip, rtpin, rtpni, rtipn,
            rtinp, rtnpi, rtnip, iprnt, iprtn, ipnrt, ipntr, iptrn, iptnr, irpnt, irptn, irnpt, irntp, irtpn, irtnp,
            inprt, inptr, inrpt, inrtp, intpr, intrp, itprn, itpnr, itrpn, itrnp, itnpr, itnrp, nprit, nprti, npirt,
            npitr, nptri, nptir, nrpit, nrpti, nript, nritp, nrtpi, nrtip, niprt, niptr, nirpt, nirtp, nitpr, nitrp,
            ntpri, ntpir, ntrpi, ntrip, ntipr, ntirp, tprin, tprni, tpirn, tpinr, tpnri, tpnir, trpin, trpni, tripn,
            trinp, trnpi, trnip, tiprn, tipnr, tirpn, tirnp, tinpr, tinrp, tnpri, tnpir, tnrpi, tnrip, tnipr, tnirp

==============================================================================
---------------
 Exercise: 012
---------------

Write a Python program to implement a generator that generates the next happy number after a given number.

From Wikipedia: In number theory, a happy number is a number which eventually reaches 1 when replaced by the sum of the
square of each digit. For instance, 13 is a happy number because 1^2 + 3^2 = 10 and 1^2 + o^2 = 1

On the other hand, 4 is not a happy number because the sequence starting with 4^2 = 16 and 1^2 + 6^2 = 37 eventually
reaches 2^2 + 0^2 =4, the number that started the sequence, and so the process continues in an infinite cycle without
ever reaching 1. A number which is not happy is called sad or unhappy.

The first 20 happy numbers are 1, 7, 10, 13, 19, 23, 28, 31, 32, 44, 49, 68, 70, 79, 82, 86, 91, 94, 97, 100, ...

==============================================================================
---------------
 Exercise: 013
---------------

Write a Python program to create a generator that generates the square, cube roots of numbers from 1 to n.

n= 1, ( 1)^2 = 1.00, ( 1)^3 = 1.00
n= 2, ( 2)^2 = 1.41, ( 2)^3 = 1.26
n= 3, ( 3)^2 = 1.73, ( 3)^3 = 1.44
n= 4, ( 4)^2 = 2.00, ( 4)^3 = 1.59
n= 5, ( 5)^2 = 2.24, ( 5)^3 = 1.71
n= 6, ( 6)^2 = 2.45, ( 6)^3 = 1.82
n= 7, ( 7)^2 = 2.65, ( 7)^3 = 1.91
n= 8, ( 8)^2 = 2.83, ( 8)^3 = 2.00
n= 9, ( 9)^2 = 3.00, ( 9)^3 = 2.08
n=10, (10)^2 = 3.16, (10)^3 = 2.15

==============================================================================
---------------
 Exercise: 014
---------------

Write a Python program to implement a generator that generates the next Armstrong number after a given number.

Armstrong numbers, also known as narcissistic numbers, are numbers that are equal to the sum of their digits each raised
to the power of the number of digits.

For example 153 is an Armstrong number because 153 = 1^3+5^3+3^3.

370     =>  371
153     =>  370
407     =>  1634

==============================================================================
---------------
 Exercise: 015
---------------

Write a Python program to create a generator function that generates all factors of a given number.

1000    =>  [1, 2, 4, 5, 8, 10, 20, 25, 40, 50, 100, 125, 200, 250, 500, 1000]
56      =>  [1, 2, 4, 7, 8, 14, 28, 56]
97      =>  [1, 97]

==============================================================================
---------------
 Exercise: 016
---------------

Write a Python program to implement a generator function that generates the running average of a sequence of numbers.

[5, 6, 7]           =>  +5.00 +5.50 +6.00
[-1, -2, -3, -4]    =>  -1.00 -1.50 -2.00 -2.50

==============================================================================
---------------
 Exercise: 017
---------------

Write a Python program to create a generator function that generates the powers of a number up to a specified exponent.

2, 3    =>  [1, 2, 4, 8]
8, 4    =>  [1, 8, 64, 512, 4096]

==============================================================================
