---------------
 Exercise: 001
---------------

Write a Python program to locate the left insertion point for a specified value in sorted order.

[1, 2, 4, 5], 6     =>  4
[1, 2, 4, 5], 3     =>  2

==============================================================================
---------------
 Exercise: 002
---------------

Write a Python program to locate the right insertion point for a specified value in sorted order.

[1, 2, 4, 7], 6         =>  3
[1, 2, 3, 4, 7], 3      =>  3

==============================================================================
---------------
 Exercise: 003
---------------

Write a Python program to implement insertion sort using bisect module.

[25, 45, 36, -47, 69, 48, 68, -78, 14, -36]

Ascending order:    [-78, -47, -36, 14, 25, 36, 45, 48, 68, 69]
Descending order:   [69, 68, 48, 45, 36, 25, 14, -36, -47, -78]

==============================================================================
---------------
 Exercise: 004
---------------

Write a Python program to find the first/last occurrence of a given number in a sorted list using Binary Search (bisect).
Note: return -1 if the element doesn't exist in the list

[1, 2, 3, 4, 8, 8, 10, 12], 8]      =>  4, 5
[1, 2, 3, 4, 8, 8, 10, 12], 80]     =>  -1, -1
[1, 2, 3, 4, 8, 8, 10, 12], -11]    =>  -1, -1
[1, 2, 3, 4, 8, 8, 10, 12], 12]     =>  7, 7

==============================================================================
---------------
 Exercise: 005
---------------

Write a Python program to find the index position of the largest value smaller than a given number in a sorted list
using Binary Search (bisect).

[1, 2, 3, 4, 8, 8, 10, 12], 5]      =>  4
[1, 2, 3, 4, 8, 8, 10, 12], 13]     =>  12
[1, 2, 3, 4, 8, 8, 10, 12], 0]      =>  None
[1, 2, 3, 4, 8, 8, 10, 12], -12]    =>  None

==============================================================================
---------------
 Exercise: 006
---------------

Write a Python program to find three integers which give the sum of zero in a given array of integers using Binary
Search (bisect).

[-20, 0, 20, 40, -20, -40, 80]          => [[-40, 0, 40], [-20, -20, 40], [-20, 0, 20]]
[1, 2, 3, 4, 5, -6]                     => [[-6, 1, 5], [-6, 2, 4]]
[-4, -1, 1, 2, 3]                       => [[-4, 1, 3]]
[0, -1, 2, -3, 1]                       => [[-3, 1, 2], [-1, 0, 1]]
[1, -2, 1, 0, 5]                        => [[-2, 1, 1]]
[2, 3, 1, 0, 5]                         => []

==============================================================================
---------------
 Exercise: 007
---------------

Write a Python program to find a triplet in an array such that the sum is closest to a given number. Return the sum of
the three integers.

[1, 2, 3, 4, 5, -6], 14     ->  (3, 4, 5) 12
[1, 2, 3, 4, -5, -6], 5     ->  (1, 2, 3) 6
[-1, 2, 2, 4], 4            ->  (-1, 2, 4) 5

==============================================================================
---------------
 Exercise: 008
---------------

Given a list, and an integer target, find all possible unique quadruplets in the list whose sum is equal to the
given target value. We can return quadruplets in any order, but all the quadruplets should be internally sorted, i.e.,
for any quadruplets [q1, q2, q3, q4] the following should follow: q1 <= q2 <= q3 <= q4.

[-2, -1, 1, 2, 3, 4, 5, 6], 10
    =>  [(-2, 1, 5, 6), (-2, 2, 4, 6), (-2, 3, 4, 5), (-1, 1, 4, 6), (-1, 2, 3, 6), (-1, 2, 4, 5), (1, 2, 3, 4)]

[10, 2, 3, 4, 5, 7, 8], 23
    =>  [(2, 3, 8, 10), (2, 4, 7, 10), (3, 5, 7, 8)]

==============================================================================
