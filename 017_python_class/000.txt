---------------
 Exercise: 001
---------------

Write a Python program to import the built-in array module and display the namespace of the said module.

__name__ array
__doc__ This module defines an object type which can efficiently represent
an array of basic values: characters, integers, floating point
numbers.  Arrays are sequence types and behave very much like lists,
except that the type of objects stored in them is constrained.

__package__
__loader__ <class '_frozen_importlib.BuiltinImporter'>
__spec__ ModuleSpec(name='array', loader=<class '_frozen_importlib.BuiltinImporter'>, origin='built-in')
_array_reconstructor <built-in function _array_reconstructor>
ArrayType <class 'array.array'>
array <class 'array.array'>
typecodes bBuhHiIlLqQfd

==============================================================================
---------------
 Exercise: 002
---------------

Write a Python program to create a class and display the namespace of that class.

The class would represent a person which has:
    1. The following members:   id (private) age (protected) name (global)
    2. The following methods:   do_nothing


__module__ __main__
__doc__ Person class
__init__ <function Person.__init__ at 0x000001C9BF658B80>
do_nothing <function Person.do_nothing at 0x000001C9BF659940>
__dict__ <attribute '__dict__' of 'Person' objects>
__weakref__ <attribute '__weakref__' of 'Person' objects>

==============================================================================
---------------
 Exercise: 003
---------------

Write a Python program to create an instance of a specified class and display the namespace of the said instance.

The class would represent a person which has:
    1. The following members:   id (private) age (protected) name (global)
    2. The following methods:   do_nothing

The instance would have the following info: ("Mustafa" as the name, 1 as the id, and 28 as the age)

{'_Person__pid': 0, '_age': 28, 'name': 'Mustafa'}

==============================================================================
---------------
 Exercise: 004
---------------

'builtins' module provides direct access to all 'built-in' identifiers of Python.

Write a Python program that imports the abs() function using the builtins module, displays the documentation of
the abs() function and finds the absolute value of -155.

Help on built-in function abs in module builtins:

abs(x, /)
    Return the absolute value of the argument.

155

==============================================================================
---------------
 Exercise: 005
---------------

Define a Python function student that takes the following arguments: student_id, student_name, and student_class
and return a string representation of a student.

When provided with (S122, 'Wilson Medina', 'VI'):

Student ID: S122
Student Name: Wilson Medina
Class: VI

==============================================================================
---------------
 Exercise: 006
---------------

Define a Python function student that takes the following arguments: student_id, student_name, and student_class
and return a string representation of a student.

The function will print the ID of a student (student_id). If the user passes an argument student_name or student_class
the function will print the student name and class.

ID: 'SV12', Name: 'Jean Garner'
    Student ID: SV12, Student Name: Jean Garner


ID: 'SV12', Name: 'Jean Garner', class: 'V'
    Student ID: SV12, Student Name: Jean Garner, Class: V

==============================================================================
---------------
 Exercise: 007
---------------

Write a Python program to create a class and display the namespace of that class.

The class would represent a person which has:
    1. The following members:   id (private) age (protected) name (global)
    2. The following methods:   do_nothing

Display its type.
Also, display the __dict__ attribute keys and the value of the __module__ attribute of the Student class.


<class '__main__.Person'>

{
    '__module__': '__main__',
    '__doc__': 'Person class',
    '__init__': <function Person.__init__ at 0x0000021F82078B80>,
    'do_nothing': <function Person.do_nothing at 0x0000021F82079940>,
    '__dict__': <attribute '__dict__' of 'Person' objects>,
    '__weakref__': <attribute '__weakref__' of 'Person' objects>
}

__main__

==============================================================================
---------------
 Exercise: 008
---------------

Write a Python program to create two empty classes, Student and Marks.
Now create some instances and check whether they are instances of the said classes or not.
Also, check whether the said classes are subclasses of the built-in object class or not.

An instance of Student is of the 'Student' type: True
An instance of Student is of the 'object' type:  True
An instance of Marks is of the 'Student' type: True
An instance of Marks is of the 'object' type:  True

==============================================================================
---------------
 Exercise: 009
---------------

Write a Python class named Student with two class attributes student_name ("Mustafa"), mark (93).
Modify the attribute values of the said class ("Younes", 100)
Print the original and modified values of the said attributes.

Original name: Mustafa
Original mark: 93
Modified name: Younes
Modified mark: 100

==============================================================================
---------------
 Exercise: 010
---------------

Write a Python class named Student with two class attributes student_id ('V10'), and student_name ('Jacqueline Barnett')

Add a new attribute student_class ('V')
Display the namespace of the class.
Now remove the student_name attribute and display the namespace of the class.

__module__ __main__
__annotations__ {'student_id': <class 'str'>, 'student_name': <class 'str'>}
student_id V10
student_name Jacqueline Barnett
__dict__ <attribute '__dict__' of 'Student' objects>
__weakref__ <attribute '__weakref__' of 'Student' objects>
__doc__ None
student_class V
**************************************************
__module__ __main__
__annotations__ {'student_id': <class 'str'>, 'student_name': <class 'str'>}
student_id V10
__dict__ <attribute '__dict__' of 'Student' objects>
__weakref__ <attribute '__weakref__' of 'Student' objects>
__doc__ None
student_class V

==============================================================================
---------------
 Exercise: 011
---------------

Write a Python class named Student with two class attributes: student_id ('V10'), student_name ('Jacqueline Barnett').
Create a function called display to show all attributes and their values in the Student class.

ID: V10, Name: Jacqueline Barnett

==============================================================================
---------------
 Exercise: 012
---------------

Write a Python class named Student with the following private attributes: (name, age)
Create two instances student1 (Ben, 28), student2 (Mark, 29).
Print all the attributes of the student1, student2 instances with their values in the given format.

_Student__name Ben
_Student__age 28
**************************************************
_Student__name Mark
_Student__age 29
**************************************************

==============================================================================
---------------
 Exercise: 013
---------------

Write a Python class to convert an integer to a Roman numeral.
Note: Below table shows the list of Roman symbols including their corresponding integer values also:

Symbols	    Values
I	        1
IV  	    4
V	        5
IX	        9
X	        10
XL	        40
L	        50
XC	        90
C	        100
CD	        400
D	        500
CM	        900
M	        1000

1       =>  I
3       =>  III
8       =>  VIII
9       =>  IX
3549    =>  MMMDXLIX
4000    =>  MMMM

==============================================================================
---------------
 Exercise: 014
---------------

Write a Python class to convert a Roman numeral to an integer.
Note: Below table shows the list of Roman symbols including their corresponding integer values also:

Symbols	    Values
I	        1
IV  	    4
V	        5
IX	        9
X	        10
XL	        40
L	        50
XC	        90
C	        100
CD	        400
D	        500
CM	        900
M	        1000

I           =>  1
III         =>  3
VIII        =>  8
IX          =>  9
C           =>  100
MMMDXLIX    =>  3549
MMMCMLXXXVI =>  3986
MMMM        =>  4000

==============================================================================
---------------
 Exercise: 015
---------------

Write a Python class to check the validity of a string of parentheses, '(', ')', '{', '}', '[' and '].
These brackets must be closed in the correct order.
For example "()" and "()[]{}" are valid but "[)", "({[)]" and "{{{" are invalid.

(){}[]      =>  True
()[{)}      =>  False
({()})      =>  True
{{([])}}    =>  True
{{([))}}    False

==============================================================================
---------------
 Exercise: 016
---------------

Write a Python class to get all possible unique subsets from a set of distinct integers.

[4, 5, 6]
[(), (6,), (4,), (5,), (4, 5), (4, 6), (5, 6), (4, 5, 6)]

==============================================================================
---------------
 Exercise: 017
---------------

Write a Python class to find a pair of elements (indices of the two numbers) from a given array whose sum equals a
specific target number. Note: There will be one solution for each input and use the last index if an element was
duplicated.

[10, 20, 10, 40, 50, 60, 70], 50   =>    (3, 4)

==============================================================================
---------------
 Exercise: 018
---------------

Write a Python class to find the three elements that sum to zero from a set of n real numbers.

[-25, -10, -7, -3, 2, 4, 8, 10]

[[-10, 2, 8], [-7, -3, 10]]

==============================================================================
---------------
 Exercise: 019
---------------

Write a Python class to implement pow(x, n).

2, -3   =>  0.125
3, 5    =>  243
100, 0  =>  1

==============================================================================
---------------
 Exercise: 020
---------------

Write a Python class to reverse a string word by word.

'hello .py'     =>  '.py hello'

==============================================================================
---------------
 Exercise: 021
---------------

Write a Python class that has two methods: get_string and print_string , get_string accept a string from the user
and print_string prints the string in upper case.

==============================================================================
---------------
 Exercise: 022
---------------

Write a Python class named Rectangle constructed from length and width and a method that will compute the area of a
rectangle.

length = 12, width = 10     =>  area = 120

==============================================================================
---------------
 Exercise: 023
---------------

Write a Python class named Circle constructed from a radius and two methods that will compute the area and the
perimeter of a circle.

Radius is 8

Area:      201.06192982974676
Perimeter: 50.26548245743669

==============================================================================
---------------
 Exercise: 024
---------------

Write a Python program to get the class name of an instance in Python.

Create a dummy class called Dummy that has the following private attributes: (d1 and d2) and a method called do_nothing
Instantiate te dummy class

The class name of the created instance:  Dummy

==============================================================================
---------------
 Exercise: 025
---------------

Write a Python class Employee with private attributes like emp_id, emp_name, emp_salary, and emp_department and
methods like update_emp_salary, and print_employee_details.

Sample Employee Data:
"ADAMS", "E7876", 50000, "ACCOUNTING"
"JONES", "E7499", 45000, "RESEARCH"
"MARTIN", "E7900", 50000, "SALES"
"SMITH", "E7698", 55000, "OPERATIONS"

Define a setter to change the department of an employee.
Use 'print_employee_details' method to print the details of an employee.
Use 'update_emp_salary' method to update the salary of an employee takes one arguments: the hours_worked, which is
the number of hours worked by the employee. If the number of hours worked is more than 50, the method computes overtime
and adds it to the salary.

Overtime is calculated as following formula:
overtime = hours_worked - 50
Overtime amount = (overtime * (salary / 50))

=====
ToDo:
=====

1. Create the following employees:
    "ADAMS", "E7876", 50000, "ACCOUNTING"
    "JONES", "E7499", 45000, "RESEARCH"
    "MARTIN", "E7900", 50000, "SALES"
    "SMITH", "E7698", 55000, "OPERATIONS"

2. Show the details of each employee

3. Change the departments of some employees:
    the first employee to "OPERATIONS"
    the froth employee to "SALES"

4. Update the salary of some employees based on provided working hours
    the second employee, given his working hours as 52 hours
    the forth employee, given his working hours as 60 hours

5. Show the details of each employee

==================================================
ID: ADAMS
Name: E7876
Salary: 50000
Department: ACCOUNTING
==================================================
ID: JONES
Name: E7499
Salary: 45000
Department: RESEARCH
==================================================
ID: MARTIN
Name: E7900
Salary: 50000
Department: SALES
==================================================
ID: SMITH
Name: E7698
Salary: 55000
Department: OPERATIONS
==================================================
Updating the salary of the second and forth employees based on the working hours:
==================================================
ID: ADAMS
Name: E7876
Salary: 50000
Department: OPERATIONS
==================================================
ID: JONES
Name: E7499
Salary: 46800.0
Department: RESEARCH
==================================================
ID: MARTIN
Name: E7900
Salary: 50000
Department: SALES
==================================================
ID: SMITH
Name: E7698
Salary: 66000.0
Department: SALES
=================================================

==============================================================================
---------------
 Exercise: 026
---------------

Write a Python class Restaurant that represents a restaurant with predefined number of tables, menu (food with
its price), and would maintain an orders list and table reservations for customers

=====
ToDo:
=====

1. Create a restaurant that has only 5 tables

2. add the following items to the restaurant menu:
    "Cheeseburger", 9.99
    "Caesar Salad", 8
    "Grilled Salmon", 19.99
    "French Fries", 3.99
    "Fish & Chips:", 15

3. Book table1 and table2 and table3

4. print the current food menu

5. add the following customer orders (where the first number is the table number and the second one is the food from
   the restaurant menu)
        1, "Cheeseburger"
        1, "Grilled Salmon"
        2, "Fish & Chips"
        2, "Grilled Salmon"

6. print the status of tables' availability along with the orders on each table.

Table: 1, Booked/busy:  1, Orders: Cheeseburger, Grilled Salmon
Table: 2, Booked/busy:  1, Orders: Fish & Chips, Grilled Salmon
Table: 3, Booked/busy:  1, Orders:
Table: 4, Booked/busy:  0, Orders:
Table: 5, Booked/busy:  0, Orders:

==============================================================================
---------------
 Exercise: 027
---------------

Write a Python class BankAccount with attributes like account_number, balance, date_of_opening and customer_name,
and methods like deposit, withdraw, and a method to show the details of the accountr.

=====
ToDo:
=====

1. Add the following accounts:
    BankAccount(2345, "01-01-2011", 1000, "Toninho Takeo")
    BankAccount(1234, "11-03-2011", 2000, "Astrid Rugile")
    BankAccount(2312, "12-01-2009", 3000, "Orli Kerenza")
    BankAccount(1395, "01-01-2011", 3000, "Luciana Chika")
    BankAccount(6345, "01-05-2011", 4000, "Toninho Takeo")

2. Show their details

3. The forth account deposited 500 into his account

4. Check the forth account balance

5. The forth account withdrew 5000 from his account

6. The forth account withdrew 3400 from his account

7. Check the forth account balance

==================================================
ID: 2345
Opened in: 2011-01-01
Balance: 1000
Customer Name: Toninho Takeo
==================================================
ID: 1234
Opened in: 2011-03-11
Balance: 2000
Customer Name: Astrid Rugile
==================================================
ID: 2312
Opened in: 2009-01-12
Balance: 3000
Customer Name: Orli Kerenza
==================================================
ID: 1395
Opened in: 2011-01-01
Balance: 3000
Customer Name: Luciana Chika
==================================================
ID: 6345
Opened in: 2011-05-01
Balance: 4000
Customer Name: Toninho Takeo
==================================================
The balance in the account 1395 is: 3500
The balance in the account 1395 is: 0.0

==============================================================================
---------------
 Exercise: 028
---------------

Write a Python class Inventory that would keep track of some items, where each has (id, name, count, price)
The class should support adding, updating (count and price), and checking (given the item id) the item details

=====
ToDo:
=====

1. Add the following items:
    "I001", "Laptop", 100, 500.00
    "I002", "Mobile", 110, 450.00
    "I003", "Desktop", 120, 500.00
    "I004", "Tablet", 90, 550.00

2. Update the item I001 count and price to: 100, 505.00 and check its details

3. Update the item I003 count and price to: 115, 500.00 and check its details

Name: Laptop    , Count: 100, Price:  505.0
Name: Desktop   , Count: 115, Price:  500.0

==============================================================================
