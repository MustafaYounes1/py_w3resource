---------------
 Exercise: 001
---------------

Write a Python function that takes a sequence of numbers and determines whether all the numbers are different
from each other.

==============================================================================
---------------
 Exercise: 002
---------------

Write a Python program that creates all possible strings using the letters 'a', 'e', 'i', 'o', and 'I'.
Ensure that each character is used only once.

==============================================================================
---------------
 Exercise: 003
---------------

Write a Python program that removes and prints every third number from a list of numbers until the list is empty
or it has less than 3 elements.

==============================================================================
---------------
 Exercise: 004
---------------

Write a Python program to identify unique triplets whose three elements sum to zero from an array of n integers.

==============================================================================
---------------
 Exercise: 005
---------------

Write a Python program to make combinations of 3 digits.

==============================================================================
---------------
 Exercise: 006
---------------

Write a Python program that prints long text, converts it to a list, and prints all the words and the
frequency of each word.

Sample input:

    United States Declaration of Independence
    From Wikipedia, the free encyclopedia
    The United States Declaration of Independence is the statement
    adopted by the Second Continental Congress meeting at the Pennsylvania State
    House (Independence Hall) in Philadelphia on July 4, 1776, which announced
    that the thirteen American colonies, then at war with the Kingdom of Great
    Britain, regarded themselves as thirteen independent sovereign states, no longer
    under British rule. These states would found a new nation â€“ the United States of
    America. John Adams was a leader in pushing for independence, which was passed
    on July 2 with no opposing vote cast. A committee of five had already drafted the
    formal declaration, to be ready when Congress voted on independence.

    John Adams persuaded the committee to select Thomas Jefferson to compose the original
    draft of the document, which Congress would edit to produce the final version.
    The Declaration was ultimately a formal explanation of why Congress had voted on July
    2 to declare independence from Great Britain, more than a year after the outbreak of
    the American Revolutionary War. The next day, Adams wrote to his wife Abigail: "The
    Second Day of July 1776, will be the most memorable Epocha, in the History of America."
    But Independence Day is actually celebrated on July 4, the date that the Declaration of
    Independence was approved.

    After ratifying the text on July 4, Congress issued the Declaration of Independence in
    several forms. It was initially published as the printed Dunlap broadside that was widely
    distributed and read to the public. The source copy used for this printing has been lost,
    and may have been a copy in Thomas Jefferson's hand.[5] Jefferson's original draft, complete
    with changes made by John Adams and Benjamin Franklin, and Jefferson's notes of changes made
    by Congress, are preserved at the Library of Congress. The best-known version of the Declaration
    is a signed copy that is displayed at the National Archives in Washington, D.C., and which is
    popularly regarded as the official document. This engrossed copy was ordered by Congress on
    July 19 and signed primarily on August 2.

    The sources and interpretation of the Declaration have been the subject of much scholarly inquiry.
    The Declaration justified the independence of the United States by listing colonial grievances against
    King George III, and by asserting certain natural and legal rights, including a right of revolution.
    Having served its original purpose in announcing independence, references to the text of the
    Declaration were few in the following years. Abraham Lincoln made it the centerpiece of his rhetoric
    (as in the Gettysburg Address of 1863) and his policies. Since then, it has become a well-known statement
    on human rights, particularly its second sentence:

    We hold these truths to be self-evident, that all men are created equal, that they are endowed by their
    Creator with certain unalienable Rights, that among these are Life, Liberty and the pursuit of Happiness.

    This has been called "one of the best-known sentences in the English language", containing "the most potent
    and consequential words in American history". The passage came to represent a moral standard to which
    the United States should strive. This view was notably promoted by Abraham Lincoln, who considered the
    Declaration to be the foundation of his political philosophy and argued that it is a statement of principles
    through which the United States Constitution should be interpreted.

    The U.S. Declaration of Independence inspired many other similar documents in other countries, the first
    being the 1789 Declaration of Flanders issued during the Brabant Revolution in the Austrian Netherlands
    (modern-day Belgium). It also served as the primary model for numerous declarations of independence across
    Europe and Latin America, as well as Africa (Liberia) and Oceania (New Zealand) during the first half of the
    19th century.

==============================================================================
---------------
 Exercise: 007
---------------

Write a Python program to count the number of each alphabet character in a text file '007.txt'.

==============================================================================
---------------
 Exercise: 008
---------------

Write a Python program that retrieves the top stories from Google News.

Link: https://news.google.com/news/rss

Hint:   use `urllib` to open the URL and read the xml contents
        use 'BeautifulSoup` to extract the top stories
        use the 'item' tag to fetch stories and query their 'title', 'link' and 'pubDate'

==============================================================================
---------------
 Exercise: 009
---------------

Write a Python program to get a list of locally installed Python modules

Hint: use 'importlib' module

==============================================================================
---------------
 Exercise: 010
---------------

Write a Python program to display some information about the OS where the script is running.

MetaData to show:

    'architecture',
    'linux_distribution',
    'mac_ver',
    'machine',
    'node',
    'platform',
    'processor',
    'python_build',
    'python_compiler',
    'python_version',
    'release',
    'system',
    'uname',
    'version',

Hint: use 'platform' module
Note: not all data above are cross-platform

==============================================================================
---------------
 Exercise: 011
---------------

Write a Python program to check the sum of three elements (each from an array) from three arrays is equal to a
target value. Print all those three-element combinations.

Sample data:
    X = [10, 20, 20, 20]
    Y = [10, 20, 30, 40]
    Z = [10, 30, 40, 20]
target = 70

==============================================================================
---------------
 Exercise: 012
---------------

Write a Python program that generates a list of all possible permutations from a given collection of distinct numbers.

==============================================================================
---------------
 Exercise: 013
---------------

Write a Python program to get all possible two-digit letter combinations from a 1-9 digit string.

    string_maps = {
        "1": "abc",
        "2": "def",
        "3": "ghi",
        "4": "jkl",
        "5": "mno",
        "6": "pqrs",
        "7": "tuv",
        "8": "wxy",
        "9": "z"
    }

    "2 3" => dg dh di eg eh ei fg fh fi

==============================================================================
---------------
 Exercise: 014
---------------

Write a Python program to add two positive integers without using the '+' operator.

Note: Use bit wise operations to add two numbers.
see https://iq.opengenus.org/addition-using-bitwise-operations/

==============================================================================
---------------
 Exercise: 015
---------------

15. Write a Python program to check the priority of the four operators (+, -, *, /).

    print(test_higher_priority('*','-'))
    print(test_higher_priority('+','-'))
    print(test_higher_priority('+','*'))
    print(test_higher_priority('+','/'))
    print(test_higher_priority('*','/'))

Output:
    True
    True
    False
    False
    True

==============================================================================
---------------
 Exercise: 016
---------------

Write a Python program to get the third side of a right-angled triangle from two given sides.

==============================================================================
---------------
 Exercise: 017
---------------

Write a Python program to get all strobogrammatic numbers that are of length n.
A strobogrammatic number is a number whose numeral is rotationally symmetric, so that it appears the same when rotated
180 degrees. In other words, the numeral looks the same right-side up and upside down (e.g., 69, 96, 1001).

For example,
Given n = 2, return "11", "69", "88", "96".
Given n = 3, return '818', '111', '916', '619', '808', '101', '906', '609', '888', '181', '986', '689'
Given n = 3, return 8008 1001 9006 6009 8888 1881 9886 6889 8118 1111 9116 6119 8968 1961 9966 6969 8698 1691 9696 6699

When generating a strobogrammatic number, we are interested in filling in the first and last digits, which are paired.
The only pairs of digits that form valid strobogrammatic numbers are:

("1", "1")
("6", "9")
("9", "6")
("8", "8")
("0", "0") (but only in the middle of the number, because a number can't start with 0 unless it's "0" itself).

==============================================================================
---------------
 Exercise: 018
---------------

Write a Python program to find the median among three given numbers.

==============================================================================
---------------
 Exercise: 019
---------------

Write a Python program that finds the value of n when n degrees of number 2 are written sequentially on a line
without spaces between them.

    "2481632" == 2 4 8 16 32 => 5

==============================================================================
---------------
 Exercise: 020
---------------

Write a Python program to find the number of zeros at the end of a factorial of a given positive number.

Range of the number(n): (1 â‰¤ n â‰¤ 2*109).

    5   =>  1
    12  =>  2
    100 =>  24

==============================================================================
---------------
 Exercise: 021
---------------

Write a Python program to find the number of notes (Samples of notes: 10, 20, 50, 100, 200, 500) against an amount.
Range - Number of notes(n) : n (1 <= n <= 1000000).

e.g.:
    880     =>  500 + 200 + 100 + 50 + 20 + 10  (6 notes)
    1000    =>  500 + 500                       (2 notes)


Define a function 'no_notes' that calculates the minimum number of notes required to represent a given amount 'a'
using denominations of 500, 200, 100, 50, 20, and 10.

f there is any remaining amount not covered by the available denominations/notes return -1

==============================================================================
---------------
 Exercise: 022
---------------

Write a Python program to create a sequence where the first four members of the sequence are equal to one.

Each successive term of the sequence is equal to the sum of the four previous ones. Find the Nth member of the sequence.

    5   =>  4
    6   =>  7
    7   =>  13

==============================================================================
---------------
 Exercise: 023
---------------

Write a Python program that accepts a positive number and subtracts from it the sum of its digits, and so on.

Continue this operation while the number is positive.

    9       => 0
    20      => 0
    110     => 0
    5674    => 0

==============================================================================
---------------
 Exercise: 024
---------------

Write a Python program to find the total number of even or odd divisors of a given integer.

    15      =>  4
    12      =>  6
    9       =>  3
    6       =>  4
    3       =>  2

==============================================================================
---------------
 Exercise: 025
---------------

Write a Python program to find the digits that are missing from a given mobile number.

    9832209763 -> 1, 4, 5

==============================================================================
---------------
 Exercise: 026
---------------

Write a Python program to compute the summation of the absolute difference of all distinct pairs in a given array
(non-decreasing order).

Sample array: [1, 2, 3]
Then all the distinct pairs will be:
    1 2
    1 3
    2 3

    [1, 2, 3]   =>  4
    [1, 4, 5]   =>  8

==============================================================================
---------------
 Exercise: 027
---------------

Write a Python program to find the type of the progression (arithmetic progression / geometric progression) and
the next successive member of the three successive members of a sequence.

According to Wikipedia, an arithmetic progression (AP) is a sequence of numbers such that the difference of any
two successive members of the sequence is a constant. For instance, the sequence 3, 5, 7, 9, 11, 13, ... is an
arithmetic progression with common difference 2. For this problem, we will limit ourselves to arithmetic progression
whose common difference is a non-zero integer.

On the other hand, a geometric progression (GP) is a sequence of numbers where each term after the first is found by
multiplying the previous one by a fixed non-zero number called the common ratio. For example, the sequence 2, 6, 18,
54, ... is a geometric progression with common ratio 3. For this problem, we will limit ourselves to geometric
progression whose common ratio is a non-zero integer.

    [1, 2, 3]       =>  4
    [2, 6, 18]      =>  54.0
    [0, 0, 0]       =>  Wrong Numbers (neither AP nor GP)

==============================================================================
---------------
 Exercise: 028
---------------

Write a Python program to print the length of the series and the series from the given 3rd term, 3rd last term and
the sum of an arithmetic progression series.

In AP, we will come across some main terms, which are denoted as:
    First term (a)
    Common difference (d)
    nth Term (an)
    Sum of the first n terms (Sn)

a, a + d, a + 2d, a + 3d, a + 4d, â€¦â€¦â€¦. ,a + (n â€“ 1) d

d = a2 â€“ a1 = a3 â€“ a2 = â€¦â€¦. = an â€“ an â€“ 1

nth Term of an AP = an = a + (n âˆ’ 1) Ã— d

sum of the first n terms: Sn = n/2[2a + (n âˆ’ 1) Ã— d]

Sum of AP when the Last Term is Given: S  = n/2 (first term + last term)

Solution:
---------
Third term =        a + 2d = k1, say (k1 is known)
Third last term =   a + (n-3)d = k2 (k2 is known)
Sum of the AP =     n/2 [2a + (n-1)d]
Alright, so now we have the equations. Let's add the first two equations.
2a + (n-1)d = k1 + k2
Putting this in the formula for sum of terms, S = n/2(k1+k2).
Hence, n = 2S/(k1+k2)
Now subtract the first equation from the second.
(n-5)d = k2 - k1. Since you know n, you can find d.
And now since you know the value of d, substitute it in the first equation to find a, the first term.

Sample Data:
    Input third term of the series: 3
    Input 3rd last term: 3
    Input Sum of the series: 15

Length of the series: 5
Series: 1 2 3 4 5

Sample Data:
    Input third term of the series: 3
    Input 3rd last term: 6
    Sum of the series: 36

Length of the series:  8
Series: 1 2 3 4 5 6 7 8

==============================================================================
---------------
 Exercise: 029
---------------

Write a Python program to find the greatest common divisor between two numbers in a given pair. (GCD)

    2, 4        =>  2
    2, 8        =>  2
    336, 360    =>  24

==============================================================================
---------------
 Exercise: 030
---------------

rite a Python program to reverse the digits of a given number and add them to the original.
Repeat this procedure if the sum is not a palindrome.

Note: A palindrome is a word, number, or other sequence of characters which reads the same backward as forward,
such as madam or racecar.

    1234    =>  5555
    1473    =>  9339

==============================================================================
---------------
 Exercise: 031
---------------

Write a Python program to count the number of carry operations for each addition problem.
According to Wikipedia " In elementary arithmetic, a carry is a digit that is transferred from one column of digits
to another column of more significant digits. It is part of the standard algorithm to add numbers together by starting
with the rightmost digits and working to the left. For example, when 6 and 7 are added to make 13, the "3" is written
to the same column and the "1" is carried to the left".

    786, 457    =>  3
    5, 6        =>  1

==============================================================================
---------------
 Exercise: 032
---------------

Write a Python program to find the heights of the top three buildings in descending order from eight given buildings.

Input:
0 <= height of building (integer) <= 10,000

Input the heights of eight buildings: 25 35 15 16 30 45 37 39
Heights of the top three buildings: 45 39 37

==============================================================================
---------------
 Exercise: 033
---------------

Write a Python program to compute the digit number of the sum of two given integers.
Each test case consists of two non-negative integers x and y which are separated by a space in a line.
0 <= x, y <= 1,000,000

Input two integers(a b):        5 7
Sum of two integers a and b.:   2   (two digits 12)

==============================================================================
---------------
 Exercise: 034
---------------

Write a Python program to check whether three given lengths (integers) of three sides form a right triangle.
Print "Yes" if the given sides form a right triangle otherwise print "No".

Integers separated by a single space.
1 <= length of the side <= 1,000

Input three integers(sides of a triangle)   8 6 7   -   3 4 5
                                            No      -   Yes

==============================================================================
---------------
 Exercise: 035
---------------

Write a Python program which solve the equation:
    ax+by=c
    dx+ey=f
Print the values of x, y where a, b, c, d, e and f are given.

a,b,c,d,e,f separated by a single space.
(-1,000 <= a,b,c,d,e,f <= 1,000)

D   =   a   b   = ae - db
        d   e

Dx  =   c   b   = ce - bf
        f   e

Dy  =   a   c   = af - cd
        d   f

x = Dx / D
y = Dy / D

Input the value of a, b, c, d, e, f:    5 8 6 7 9 4
Values of x and y:                      -2.000 2.000

==============================================================================
---------------
 Exercise: 036
---------------

Write a Python program to compute the amount of debt in n months. Each month, the loan adds 5% interest to the
$100,000 debt and rounds to the nearest 1,000 above.
Input:
An integer n (0 <= n <= 100)

Input number of months:     7
Amount of debt:             $144000

==============================================================================
---------------
 Exercise: 037
---------------

Write a Python program that reads an integer n and finds the number of combinations of a,b,c and d
(0 = a,b,c,d = 9) where (a + b + c + d) will be equal to n.

Input:
n (1 â‰¤ n â‰¤ 50)
    Input the number(n):    15
    Number of combinations: 592

==============================================================================
---------------
 Exercise: 038
---------------

Write a Python program to print the number of prime numbers that are less than or equal to a given number.
Input:
n (1 <= n <= 999,999)
Input the number(n): 35
Number of prime numbers which are less than or equal to n.: 11

==============================================================================
---------------
 Exercise: 039
---------------

Write a program to compute the radius and the central coordinate (x, y) of a circle which is constructed from three
given points on the plane surface.

Input:
x1, y1, x2, y2, x3, y3 separated by a single space.

Input three coordinate of the circle:       9 3 6 8 3 6
Radius of the said circle:                  3.358
Central coordinate (x, y) of the circle:    6.071 4.643

==============================================================================
---------------
 Exercise: 040
---------------

Write a Python program to check if a point (x,y) is in a triangle or not. A triangle is formed by three points.

==============================================================================
---------------
 Exercise: 041
---------------

Write a Python program to compute and print the sum of two given integers (greater or equal to zero).
In the event that the given integers or the sum exceed 80 digits, print "overflow".
Input first integer:        25
Input second integer:       22
Sum of the two integers:    47

==============================================================================
---------------
 Exercise: 042
---------------

Write a Python program that accepts six numbers as input and sorts them in descending order.

Input:
Input consists of six numbers n1, n2, n3, n4, n5, n6 (-100000 <= n1, n2, n3, n4, n5, n6 <= 100000).
The six numbers are separated by a space.

Input six integers:                 15 30 25 14 35 40
After sorting the said integers:    40 35 30 25 15 14

==============================================================================
---------------
 Exercise: 043
---------------

Write a Python program to test whether two lines PQ and RS are parallel.
The four points are P(x1, y1), Q(x2, y2), R(x3, y3), S(x4, y4).

Input:
x1,y1,x2,y2,x3,y3,xp,yp separated by a single space
Input x1,y1,x2,y2,x3,y3,xp,yp:  2 5 6 4 8 3 9 7
                                PQ and RS are not parallel

==============================================================================
---------------
 Exercise: 044
---------------

Write a Python program to find the maximum sum of a contiguous subsequence from a given sequence of numbers
a1, a2, a3, .... A subsequence of one element is also a continuous subsequence.

Input:
You can assume that 1 <= n <= 5000 and -100000 <= ai <= 100000.
Input numbers are separated by a space.
Input 0 to exit.
Input number of sequence of numbers you want to input (0 to exit):  3
Input numbers:
2
4
6
Maximum sum of the said contiguous subsequence: 12
Input number of sequence of numbers you want to input (0 to exit):
0

==============================================================================
---------------
 Exercise: 045
---------------

There are two circles C1 with radius r1, central coordinate (x1, y1) and C2 with radius r2 and central coordinate
(x2, y2).

Write a Python program to test the followings -

"C2 is in C1" if C2 is in C1
"C1 is in C2" if C1 is in C2
"Circumference of C1 and C2 intersect" if circumference of C1 and C2 intersect
"C1 and C2 do not overlap" if C1 and C2 do not overlap and
"Circumference of C1 and C2 will touch" if C1 and C2 touch

Input numbers (real numbers) are separated by a space.

Input x1, y1, r1, x2, y2, r2:   5 4 2 3 9 2
                                C1 and C2 do not overlap

Input x1, y1, r1, x2, y2, r2:   5 4 3 5 10 3
                                Circumference of C1 and C2 will touch

Input x1, y1, r1, x2, y2, r2:   6 4 3 10 4 2
                                Circumference of C1 and C2 intersect

Input x1, y1, r1, x2, y2, r2:   5 4 3 5 4 2
                                C2 is in C1

Input x1, y1, r1, x2, y2, r2:   5 4 2 5 4 3
                                C1 is in C2

==============================================================================
---------------
 Exercise: 046
---------------

Write a Python program that reads a date (from 2016/1/1 to 2016/12/31) and prints the day of the date. Jan. 1, 2016,
is Friday. Note that 2016 is a leap year.

Input:
Two integers m and d separated by a single space in a line, m ,d represent the month and the day.
Input month and date (separated by a single space): 5 15
Name of the date:                                   Sunday

==============================================================================
---------------
 Exercise: 047
---------------

Write a Python program that reads text (only alphabetical characters and spaces) and prints two words.
The first word is the one that appears most often in the text. The second one is the word with the most letters.

Note: A word is a sequence of letters which is separated by the spaces.

Input:
A text is given in a line with following condition:
a. The number of letters in the text is less than or equal to 1000.
b. The number of letters in a word is less than or equal to 32.
c. There is only one word which is arise most frequently in given text.
d. There is only one word which has the maximum number of letters in given text.

Input text: Thank you for your comment and your participation.
Output:     your participation.

==============================================================================
---------------
 Exercise: 048
---------------

Write a Python program that reads n digits (given) chosen from 0 to 9 and prints the number of combinations where
the sum of the digits equals another given number (s). Do not use the same digits in a combination.

Input:
Two integers as number of combinations and their sum by a single space in a line. Input 0 0 to exit.
Input number of combinations and sum, input 0 0 to exit:
5 6
2 4
0 0
2

==============================================================================
---------------
 Exercise: 049
---------------

Write a Python program that reads the two adjoining sides and the diagonal of a parallelogram and checks whether
the parallelogram is a rectangle or a rhombus.

According to Wikipedia-
parallelograms: In Euclidean geometry, a parallelogram is a simple (non-self-intersecting) quadrilateral with two
pairs of parallel sides. The opposite or facing sides of a parallelogram are of equal length and the opposite angles
of a parallelogram are of equal measure.

rectangles: In Euclidean plane geometry, a rectangle is a quadrilateral with four right angles. It can also be defined
as an equiangular quadrilateral, since equiangular means that all of its angles are equal (360Â°/4 = 90Â°). It can also
be defined as a parallelogram containing a right angle.

rhombus: In plane Euclidean geometry, a rhombus (plural rhombi or rhombuses) is a simple (non-self-intersecting)
quadrilateral whose four sides all have the same length. Another name is equilateral quadrilateral, since equilateral
means that all of its sides are equal in length. The rhombus is often called a diamond, after the diamonds suit in
playing cards which resembles the projection of an octahedral diamond, or a lozenge, though the former sometimes
refers specifically to a rhombus with a 60Â° angle, and the latter sometimes refers specifically to a rhombus with
a 45Â° angle.

Input:
Two adjoined sides and the diagonal.
1 <= ai, bi, ci <= 1000, ai + bi > ci
Input two adjoined sides and the diagonal of a parallelogram (comma separated): 3,4,5
                                                                                This is a rectangle.

==============================================================================
---------------
 Exercise: 050
---------------

Write a Python program to replace a string "Python" with "Java" and "Java" with "Python" in a given string.

Input:
English letters (including single byte alphanumeric characters, blanks, symbols) are given on one line.
The length of the input character string is 1000 or less.

Input a text with two words 'Python' and 'Java'
Python is popular than Java     =>      Java is popular than Python

==============================================================================
---------------
 Exercise: 051
---------------

Write a Python program that determines the difference between the largest and smallest integers created by 8 numbers
from 0 to 9. The number that can be rearranged shall start with 0 as in 00135668.

Input:
Input an integer created by 8 numbers from 0 to 9.:                                 2345    34568729
Difference between the largest and the smallest integer from the given integer:     3087    75308643

e.g.:
34568729    =>  largest:    98765432    => difference:  75308643
                smallest:   23456789

==============================================================================
---------------
 Exercise: 052
---------------

Write a Python program to compute the sum of the first n prime numbers.

Input:
n ( n <= 10000). Input 0 to exit the program.
Input a number (n<=10000) to compute the sum:(0 to exit)    25
Sum of first 25 prime numbers:                              1060

==============================================================================
---------------
 Exercise: 053
---------------

Write a Python program which accepts an even number (>=4, Goldbach number) from the user and creates combinations
which express the given number as a sum of two prime numbers. Print the number of combinations.

Goldbach number: A Goldbach number is a positive even integer that can be expressed as the sum of two odd primes.
Since four is the only even number greater than two that requires the even prime 2 in order to be written as the sum
of two primes, another form of the statement of Goldbach's conjecture is that all even integers greater than 4 are
Goldbach numbers.

The expression of a given even number as a sum of two primes is called a Goldbach partition of that number.
The following are examples of Goldbach partitions for some even numbers:
6 = 3 + 3
8 = 3 + 5
10 = 3 + 7 = 5 + 5
12 = 7 + 5
...
100 = 3 + 97 = 11 + 89 = 17 + 83 = 29 + 71 = 41 + 59 = 47 + 53

Input an even number (0 to exit):   100
Number of combinations:             6

==============================================================================
---------------
 Exercise: 054
---------------

If you draw a straight line on a plane, the plane is divided into two regions. For example, if you draw two straight
lines in parallel, you get three areas, and if you draw vertically one to the other you get 4 areas.

Write a Python program to create the maximum number of regions obtained by drawing n given non-parallel straight lines.
Input:
(1 <= n <= 10,000)
Input number of straight lines (o to exit):     5
Number of regions:                              16

One line can divide a plane into two regions, two non-parallel lines can divide a plane into 4 regions and three
non-parallel lines can divide into 7 regions, and so on

L(2) â€“ L(1) = 2 â€¦ (i)
L(3) â€“ L(2) = 3 â€¦ (ii)
L(4) â€“ L(3) = 4 â€¦ (iii)
. . .
. . .
L(n) â€“ L(n-1) = n ; â€¦ (n)

Adding all the above equation we get,
L(n) â€“ L(1) = 2 + 3 + 4 + 5 + 6 + 7 + â€¦â€¦ + n ;
L(n) = L(1) + 2 + 3 + 4 + 5 + 6 + 7 + â€¦â€¦ + n ;
L(n) = 2 + 2 + 3 + 4 + 5 + 6 + 7 + â€¦â€¦ + n ;
L(n) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + â€¦â€¦ + n + 1 ;

L(n) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + â€¦â€¦ + n
sum of the first n elements in an AP: n/2 [2a + (n-1)d] => 1/2 (n^2 + n)

there was a "+1" left => L(n) = (n^2 + n) / 2 + 1

==============================================================================
---------------
 Exercise: 055
---------------

There are four different points on a plane, P(xp,yp), Q(xq, yq), R(xr, yr) and S(xs, ys).
Write a Python program to determine whether AB and CD are orthogonal.

Input:
xp,yp, xq, yq, xr, yr, xs and ys are -100 to 100 respectively and each value can be up to 5 digits after the decimal
point It is given as a real number including the number of. Output:

Output AB and CD are not orthogonal! or AB and CD are orthogonal!.

Input xp, yp, xq, yq, xr, yr, xs, ys:   4.5 -2.5 -2.5 4.5 3.5 3.5 3.8 -3.5
                                        AB and CD are not orthogonal!

Both lines have infinite slope then answer is no.
One line has infinite slope and if other line has 0 slope then answer is yes otherwise no.
Both lines have finite slope and their product is -1 then the answer is yes.

==============================================================================
---------------
 Exercise: 056
---------------

Write a Python program to sum all numerical values (positive integers) embedded in a sentence.

Input:
Sentences with positive integers are given over multiple lines. Each line is a character string containing one-byte
alphanumeric characters, symbols, spaces, or an empty line. However the input is 80 characters or less per line and
the sum is 10,000 or less.

Sum of the numeric values:                      "sd1fdsfs23 dssd56"           80
Sum of the numeric values:                      "15apple2banana"              17
Sum of the numeric values:                      "flowers5fruit5"              10

==============================================================================
---------------
 Exercise: 057
---------------

There are 10 vertical and horizontal squares on a plane. Each square is painted blue and green. Blue represents
the sea, and green represents the land. When two green squares are in contact with the top and bottom, or right and
left, they are said to be ground. The area created by only one green square is called "island". For example, there
are five islands in the figure below.

Write a Python program to read the mass data and find the number of islands.

Input:
A single data set is represented by 10 rows of 10 numbers representing green squares as 1 and blue squares as zeros.

1100000111
1000000111
0000000111
0010001000
0000011100
0000111110
0001111111
1000111110
1100011100
1110001000

Number of islands:  5

==============================================================================
---------------
 Exercise: 058
---------------

When character are consecutive in a string , it is possible to shorten the character string by replacing the character
with a certain rule. For example, in the case of the character string YYYYY, if it is expressed as # 5 Y, it is
compressed by one character.

Write a Python program to restore the original string by entering the compressed string with this rule.
However, the # character does not appear in the restored character string.

Input:
The restored character string for each character on one line.
Original text: XY#6Z1#4023  =>  XYZZZZZZ1000023
Original text: #39+1=1#30   =>  999+1=1000

==============================================================================
---------------
 Exercise: 059
---------------

A convex polygon is a simple polygon in which no line segment between two points on the boundary ever goes outside
 the polygon. Equivalently, it is a simple polygon whose interior is a convex set. In a convex polygon, all interior
 angles are less than or equal to 180 degrees, while in a strictly convex polygon all interior angles are strictly less
 than 180 degrees.

Write a Python program that compute the area of the polygon . The vertices have the names vertex 1, vertex 2, vertex 3,
 ... vertex n according to the order of edge connections

Note: The original sentences are uppercase letters, lowercase letters, numbers, symbols, less than 100 letters, and
consecutive letters are not more than 9 letters.

Hint: use the Triangle Formula from https://en.wikipedia.org/wiki/Shoelace_formula (abstract the result)
Input:

Input number of sides: 5
Side: 1
Input the Coordinate:
Input Coordinate x: 1
Input Coordinate y: 0
Side: 2
Input the Coordinate:
Input Coordinate x: 0
Input Coordinate y: 0
Side: 3
Input the Coordinate:
Input Coordinate x: 1
Input Coordinate y: 1
Side: 4
Input the Coordinate:
Input Coordinate x: 2
Input Coordinate y: 0
Side: 5
Input the Coordinate:
Input Coordinate x: -1
Input Coordinate y: 1
Area of the Polygon: 0.5

==============================================================================
---------------
 Exercise: 060
---------------

Internet search engine giant, such as Google accepts web pages around the world and classify them, creating a huge
database. The search engines also analyze the search keywords entered by the user and create inquiries for database
search. In both cases, complicated processing is carried out in order to realize efficient retrieval, but basics are
all cutting out words from sentences.

Write a Python program to cut out / return words of 3 to 6 characters length from a given sentence not more
than 1024 characters.

Input:
English sentences consisting of delimiters and alphanumeric characters are given on one line.
Input a sentence (1024 characters. max.)
The quick brown fox => The quick brown fox

==============================================================================
---------------
 Exercise: 061
---------------

Arrange integers (0 to 99) as narrow hilltop, as illustrated in Figure 1. Reading such data representing huge,
when starting from the top and proceeding according to the next rule to the bottom. Write a Python program that
compute the maximum value of the sum of the passing integers according to the following rules.

At each step, you can go to the lower left diagonal or the lower right diagonal. For example, in the example of FIG. 1,
as shown in FIG. 2, when 8,4,9,8,6,8,9,4,8 is selected and passed, the sum is 64
(8 + 4 + 9) + 8 + 6 + 8 + 9 + 4 + 8 = 64)

Input:
A series of integers separated by commas are given in diamonds. No spaces are included in each line.
The input example corresponds to Figure 1. The number of lines of data is less than 100 lines.

Example1:
        [8],                        => 64
        [4, 9],
        [9, 2, 1],
        [3, 8, 5, 5],
        [5, 6, 3, 7, 6],
        [3, 8, 5, 5],
        [9, 2, 1],
        [4, 9],
        [8]

Example2:
        [7],                          => 55
        [3, 8],
        [8, 1, 0],
        [2, 7, 4, 4],
        [4, 5, 2, 6, 5],
        [2, 7, 4, 4],
        [8, 1, 0],
        [3, 8],
        [7]

==============================================================================
---------------
 Exercise: 062
---------------

Write a Python program to find the number of combinations that satisfy p + q + r + s = n where n is a given number <=
4000 and p, q, r, s are between 0 and 1000.

Input a positive integer: (ctrl+d to exit)  252
Number of combinations of a,b,c,d:          2731135

==============================================================================
---------------
 Exercise: 063
---------------

Your task is to develop a small part of spreadsheet software.
Write a Python program that adds up the columns and rows of the given table as shown in the specified figure:

n (the size of row and column of the given table)
1st row of the table
2nd row of the table
:
:
n th row of the table
The input ends with a line consisting of a single 0.
Output:
For each dataset, print the table with sum of rows and columns.

Input number of rows/columns (0 to exit)
 4
Input cell value:
 25 69 51 26
 68 35 29 54
 54 57 45 63
 61 68 47 59
Result:
   25   69   51   26  171
   68   35   29   54  186
   54   57   45   63  219
   61   68   47   59  235
  208  229  172  202  811
Input number of rows/columns (0 to exit)

==============================================================================
---------------
 Exercise: 064
---------------

Given a list of numbers and a number k, write a Python program to check whether the sum of any two numbers from the
list is equal to k or not.

For example, given [1, 5, 11, 5] and k = 16, return true since 11 + 5 is 16.

Sample Input:
([12, 5, 0, 5], 10)     => True
([20, 20, 4, 5], 40)    => True
([1, -1], 0)            => True
([1, 1, 0], 0)          => False

==============================================================================
---------------
 Exercise: 065
---------------

In mathematics, a subsequence is a sequence that can be derived from another sequence by deleting some or no elements
without changing the order of the remaining elements. For example, the sequence (A,B,D) is a subsequence of
(A,B,C,D,E,F) obtained after removal of elements C, E, and F. The relation of one sequence being the subsequence of
another is a preorder.

The subsequence should not be confused with substring (A,B,C,D) which can be derived from the above string
(A,B,C,D,E,F) by deleting substring (E,F). The substring is a refinement of the subsequence.
The list of all subsequences for the word "apple" would be "a", "ap", "al", "ae", "app", "apl", "ape", "ale", "appl",
"appe", "aple", "apple", "p", "pp", "pl", "pe", "ppl", "ppe", "ple", "pple", "l", "le", "e", "".
Write a Python program to find the longest word in a set of words which is a subsequence of a given string.

Sample Input:
("Green", {"Gn", "Gren", "ree", "en"})          =>  Gren
("pythonexercises", {"py", "ex", "exercises"})  =>  exercises

==============================================================================
---------------
 Exercise: 066
---------------

From Wikipedia, the free encyclopaedia:
A happy number is defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process
until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.

Note: If the current sum of squares has been encountered before, it forms a cycle => The number is not a Happy Number

Write a Python program to check whether a number is "happy" or not.

Sample Input:
(7)     => True
(932)   => True
(6)     => False

==============================================================================
---------------
 Exercise: 067
---------------

From Wikipedia,
A happy number is defined by the following process:
Starting with any positive integer, replace the number by the sum of the squares of its digits, and repeat the process
until the number equals 1 (where it will stay), or it loops endlessly in a cycle which does not include 1.
Those numbers for which this process ends in 1 are happy numbers, while those that do not end in 1 are unhappy numbers.

Write a Python program to find and print the first 10 happy numbers.
Sample Input:   [:10]
Sample Output:  [1, 7, 10, 13, 19, 23, 28, 31, 32, 44]

==============================================================================
---------------
 Exercise: 068
---------------

Write a Python program that counts the number of prime numbers that are less than a given non-negative number.
Sample Input:
(10)    =>  4
(100)   =>  25

==============================================================================
---------------
 Exercise: 069
---------------

In abstract algebra, a group isomorphism is a function between two groups that sets up a one-to-one correspondence
between the elements of the groups in a way that respects the given group operations. If there exists an isomorphism
between two groups, then the groups are called isomorphic.

Two strings are isomorphic if the characters in string A can be replaced to get string B
Given "foo", "bar", return false.
Given "paper", "title", return true.

Isomorphic strings are strings where each character in one string can be consistently replaced with another character
to result in the second string. (for both strings)

Write a Python program to check if two given strings are isomorphic to each other or not.
Sample Input:
("foo", "bar")      => False
("bar", "foo")      => False    (first 'o' in 'foo' is replaced with 'a' from 'bar', but the second replaces 'r')
("paper", "title")  => True
("title", "paper")  => True
("apple", "orange") => False
("aa", "ab")        => False
("ab", "aa")        => False

==============================================================================
---------------
 Exercise: 070
---------------

Write a Python program to find the longest common prefix string among a given array of strings.
Return an empty string if there is no common prefix.

For Example, longest common prefix of "abcdefgh" and "abcefgh" is "abc".
Sample Input:
["abcdefgh","abcefgh"]      => abc
["w3r","w3resource"]        => w3r
["Python","PHP", "Perl"]    => p
["Python","PHP", "Java"]    => ""

==============================================================================
---------------
 Exercise: 071
---------------

Write a Python program to reverse only the vowels of a given string.

Sample Input:
"w3resource"    =>  w3resuorce
"Python"        =>  Python
"Perl"          =>  Perl
"USA"           =>  ASU
"hello"         =>  holle
"hello world"   =>  hollo werld

==============================================================================
---------------
 Exercise: 072
---------------

Write a Python program to check whether a given integer is a palindrome or not.
Note: An integer is a palindrome when it reads the same backward as forward. Negative numbers are not palindromic.

Sample Input:
100     =>  False
252     =>  True
-838    =>  False

==============================================================================
---------------
 Exercise: 073
---------------

Write a Python program that removes duplicate elements from a given array of numbers so that each element appears
only once and returns the new length of the array.

Sample Input:
[0,0,1,1,2,2,3,3,4,4,4]     =>  5
[1, 2, 2, 3, 4, 4]          =>  4

==============================================================================
---------------
 Exercise: 074
---------------

Write a Python program to calculate the maximum profit from selling and buying values of stock. An array of numbers
represent the stock prices in chronological order.

For example, given [8, 10, 7, 5, 7, 15], the function will return 10, since the buying value of the stock is 5 dollars
and sell value is 15 dollars.

Sample Input:
[8, 10, 7, 5, 7, 15]    =>  10
[1, 2, 8, 1]            =>  7
[]                      =>  0

==============================================================================
---------------
 Exercise: 075
---------------

Write a Python program to remove all instances of a given value from a given array of integers and find the length
of the newly created array.

Sample Input:
([1, 2, 3, 4, 5, 6, 7, 5], 5)       =>  6
([10,10,10,10,10], 10)              =>  0
([10,10,10,10,10], 20)              =>  5
([], 1)                             =>  0

==============================================================================
---------------
 Exercise: 076
---------------

Write a Python program to find the starting and ending position of a given value in an array of integers,
sorted in ascending order.

If the target is not found in the array, return [-1, 0].
Input: [5, 7, 7, 8, 8, 8] target value = 8      =>  Output: [3, 5]
Input: [1, 3, 6, 9, 13, 14] target value = 4    =>  Output: [-1, 0]

==============================================================================
---------------
 Exercise: 077
---------------

The price of a given stock on each day is stored in an array.
Write a Python program to find the maximum profit in one transaction i.e., buy one and sell one share of the stock
from the given price value of the said array. You cannot sell a stock before you buy one.

Input (Stock price of each day): [224, 236, 247, 258, 259, 225]     =>  Output: 35
Explanation:
236 - 224 = 12
247 - 224 = 23
258 - 224 = 34
259 - 224 = 35
225 - 224 = 1
247 - 236 = 11
258 - 236 = 22
259 - 236 = 23
225 - 236 = -11
258 - 247 = 11
259 - 247 = 12
225 - 247 = -22
259 - 258 = 1
225 - 258 = -33
225 - 259 = -34

==============================================================================
---------------
 Exercise: 078
---------------

Write a Python program to print a given N by M matrix of numbers line by line in forward > backwards > forward >...
order.

Input matrix:
[[1, 2, 3,4],
[5, 6, 7, 8],
[0, 6, 2, 8],
[2, 3, 0, 2]]

Output:
1
2
3
4
8
7
6
5
0
6
2
8
2
0
3
2

==============================================================================
---------------
 Exercise: 079
---------------

Write a Python program to compute the largest product of three integers from a given list of integers.

[-10, -20, 20, 1]       =>  4000
[-1, -1, 4, 2, 1]       =>  8
[1, 2, 3, 4, 5, 6]      =>  120

==============================================================================
---------------
 Exercise: 080
---------------

Write a Python program to find the first missing positive integer that does not exist in a given list.

Sample Input:
[2, 3, 7, 6, 8, -1, -10, 15, 16]    =>  4
[1, 2, 4, -7, 6, 8, 1, -10, 15]     =>  3
[1, 2, 3, 4, 5, 6, 7]               =>  8
[-2, -3, -1, 1, 2, 3]               =>  4

==============================================================================
---------------
 Exercise: 081
---------------

Write a Python program to randomly generate a list of 10 even numbers between 1 and 100 inclusive.

Note: Use random.sample() to generate a list of random values.
Sample Input:   (1,100)
Sample Output:  [4, 22, 8, 20, 24, 12, 30, 98, 28, 48]

==============================================================================
---------------
 Exercise: 082
---------------

Write a Python program to calculate the median from a list of numbers.
Sample Input:
[1,2,3,4,5]                     =>  3
[1,2,3,4,5,6]                   =>  3.5
[6,1,2,4,5,3]                   =>  3.5
[1.0,2.11,3.3,4.2,5.22,6.55]    =>  3.75
[1.0,2.11,3.3,4.2,5.22]         =>  3.3
[2.0,12.11,22.3,24.12,55.22]    =>  22.3

==============================================================================
---------------
 Exercise: 083
---------------

Write a Python program to test whether a given number is symmetrical or not. A number is symmetrical when it is equal
to its reverse. A number is symmetrical when it is equal of its reverse.
Sample Input:
(121)       =>  True
(0)         =>  True
(122)       =>  False
(990099)    =>  True

==============================================================================
---------------
 Exercise: 084
---------------

Write a Python program that accepts a list of numbers. Count the negative numbers and compute the sum of the positive
numbers of the said list. Return these values through a list.

Original list: [1, 2, 3, 4, 5]
Number of negative of numbers and sum of the positive numbers of the said list: [0, 15]

Original list: [-1, -2, -3, -4, -5]
Number of negative of numbers and sum of the positive numbers of the said list: [5, 0]

Original list: [1, 2, 3, -4, -5]
Number of negative of numbers and sum of the positive numbers of the said list: [2, 6]

Original list: [1, 2, -3, -4, -5]
Number of negative of numbers and sum of the positive numbers of the said list: [3, 3]

==============================================================================
---------------
 Exercise: 085
---------------

From Wikipedia:
An isogram (also known as a "nonpattern word") is a logological term for a word or phrase without a repeating letter.
It is also used by some people to mean a word or phrase in which each letter appears the same number of times, not
necessarily just once. Conveniently, the word itself is an isogram in both senses of the word, making it autological.

Write a Python program to check whether a given string is an "isogram" or not.

Sample Input:
("w3resource")      =>  False
("w3r")             =>  True
("Python")          =>  True
("Java")            =?  False

==============================================================================
---------------
 Exercise: 086
---------------

Write a Python program to count the number of equal numbers from three given integers.

Sample Input:
(1, 1, 1)       =>  3
(1, 2, 2)       =>  2
(-1, -2, -3)    =>  0
(-1, -1, -1)    =>  3

==============================================================================
---------------
 Exercise: 087
---------------

Write a Python program to check whether a given employee code is exactly 8 digits or 12 digits.
Return True if the employee code is valid and False if it's not.

Sample Input:
('12345678')        =>  True
('1234567j')        =>  False
('12345678j')       =>  False
('123456789123')    =>  True
('123456abcdef')    =>  False

==============================================================================
---------------
 Exercise: 088
---------------

Write a Python program that accepts two strings and determines whether the letters in the second string are present in
the first string.

Sample Input:
["python", "ypth"]      =>  True
["python", "ypths"]     =>  False
["python", "ypthon"]    =>  True
["123456", "01234"]     =>  False
["123456", "1234"]      =>  True

==============================================================================
---------------
 Exercise: 089
---------------

Write a Python program to compute the sum of the three lowest positive numbers from a given list of numbers.

Original list of numbers: [10, 20, 30, 40, 50, 60, 7]
Sum of the three lowest positive numbers of the said array: 37

Original list of numbers: [1, 2, 3, 4, 5]
Sum of the three lowest positive numbers of the said array: 6

Original list of numbers: [0, 1, 2, 3, 4, 5]
Sum of the three lowest positive numbers of the said array: 6

==============================================================================
---------------
 Exercise: 090
---------------

Write a Python program that replaces all but the last five characters of a string with "*" and returns the modified
string.

Original String: kdi39323swe    =>  ******23swe

Original String: 12345abcdef    =>  ******bcdef

Original String: 12345          =>  12345

==============================================================================
---------------
 Exercise: 091
---------------

Write a Python program to count the number of arguments in a given function.

Sample Input:
()              =>  0
(1)             =>  1
(1, 2)          =>  2
(1, 2, 3)       =>  3
(1, 2, 3, 4)    =>  4
[1, 2, 3, 4]    =>  1

==============================================================================
---------------
 Exercise: 092
---------------

Write a Python program to compute the cumulative sum of numbers in a given list.
Note: Cumulative sum = sum of itself + all previous numbers in the said list.

Sample Input:
[10, 20, 30, 40, 50, 60, 7]     =>  [10, 30, 60, 100, 150, 210, 217]
[1, 2, 3, 4, 5]                 =>  [1, 3, 6, 10, 15]
[0, 1, 2, 3, 4, 5]              =>  [0, 1, 3, 6, 10, 15]

==============================================================================
---------------
 Exercise: 093
---------------

Write a Python program to find the central character(s) of a given string. Return the two middle characters if the
length of the string is even. Return the middle character if the length of the string is odd.

Original string: Python         =>  th
Original string: PHP            =>  H
Original string: Java           =>  av

==============================================================================
---------------
 Exercise: 094
---------------

Write a Python program to find the largest product of a pair of adjacent elements from a given list of integers.

Original list: [1, 2, 3, 4, 5, 6]   =>  30
Original list: [1, 2, 3, 4, 5]      =>  20
Original list: [2, 3]               =>  6

==============================================================================
---------------
 Exercise: 095
---------------

Write a Python program that checks whether every even index contains an even number and every odd index contains an
odd number of a given list.

Original list of numbers: [2, 1, 4, 3, 6, 7, 6, 3]      =>  True

Original list of numbers: [2, 1, 4, 3, 6, 7, 6, 4]      =>  False

==============================================================================
---------------
 Exercise: 096
---------------

Write a Python program to check whether a given number is a narcissistic number or not.

If you are a reader of Greek mythology, then you are probably familiar with Narcissus. He was a hunter of exceptional
beauty that he died because he was unable to leave a pool after falling in love with his own reflection. That's why I
keep myself away from pools these days (kidding).

In mathematics, he has kins by the name of narcissistic numbers - numbers that can't get enough of themselves.
In particular, they are numbers that are the sum of their digits when raised to the power of the number of digits.

For example, 371 is a narcissistic number; it has three digits, and if we cube each digits 33 + 73 + 13 the sum is 371.

Other 3-digit narcissistic numbers are
153 = 1^3 + 5^3 + 3^3
370 = 3^3 + 7^3 + 0^3
407 = 4^3 + 0^3 + 7^3.

There are also 4-digit narcissistic numbers, some of which are 1634, 8208, 9474 since
1634 = 1^4+6^4+3^4+4^4
8208 = 8^4+2^4+0^4+8^4
9474 = 9^4+4^4+7^4+4^4

It has been proven that there are only 88 narcissistic numbers (in the decimal system) and that the largest of which is
115,132,219,018,763,992,565,095,597,973,971,522,401; has 39 digits.

Sample Input:
(153)   =>  True
(370)   =>  True
(407)   =>  True
(409)   =>  False
(1634)  =>  True
(8208)  =>  True
(9474)  =>  True
(9475)  =>  False

==============================================================================
---------------
 Exercise: 097
---------------

Write a Python program to find the highest and lowest number from a given string of space-separated integers.

Original string: 1 4 5 77 9 0       =>  (77, 0)
Original string: -1 -4 -5 -77 -9 0  =>  (0, -77)
Original string: 0 0                =>  (0, 0)

==============================================================================
---------------
 Exercise: 098
---------------

Write a Python program to check whether a sequence of numbers has an increasing trend or not.

Sample Input:
[1,2,3,4]       =>  True
[1,2,5,3,4]     =>  False
[-1,-2,-3,-4]   =>  False
[-4,-3,-2,-1]   =>  True
[1,2,3,4,0]     =>  False

==============================================================================
---------------
 Exercise: 099
---------------

Write a Python program to find the position of the second occurrence of a given string in another given string.
If there is no such string return -1.
Sample Input:
("The quick brown fox jumps over the lazy dog", "the")  =>  -1
("the quick brown fox jumps over the lazy dog", "the")  =>  31

==============================================================================
---------------
 Exercise: 100
---------------

Write a Python program to compute the sum of all items in a given array of integers where each integer is multiplied
by its index. Return 0 if there is no number.

Sample Input:
[1,2,3,4]       =>  20
[-1,-2,-3,-4]   =>  -20
[]              =>  0

==============================================================================
---------------
 Exercise: 101
---------------

Write a Python program to find the name of the oldest student in a given dictionary containing the names and ages of
a group of students.

{
    "Bernita Ahner": 12,
    "Kristie Marsico": 11,
    "Sara Pardee": 14,
    "Fallon Fabiano": 11,
    "Nidia Dominique": 15
}   =>  Nidia Dominique

{
    "Nilda Woodside": 12,
    "Jackelyn Pineda": 12.2,
    "Sofia Park": 12.4,
    "Joannie Archibald": 12.6,
    "Becki Saunder": 12.7
}   =>  Becki Saunder

==============================================================================
---------------
 Exercise: 102
---------------

Write a Python program to create a string with no duplicate consecutive letters from a given string.

Sample Input:
("PPYYYTTHON")      =>  PYTHON
("PPyyythonnn")     =>  Python
("Java")            =>  Java
("PPPHHHPPP")       =>  PHP

==============================================================================
---------------
 Exercise: 103
---------------

Write a Python program to check whether two given lines are parallel or not.
Note: Parallel lines are two or more lines that never intersect. Parallel Lines are like railroad tracks that never intersect.
The General Form of the equation of a straight line is: ax + by = c
The said straight line is represented in a list as [a, b, c]
Example of two parallel lines:
x + 4y = 10 and x + 4y = 14

Sample Input:
([2,3,4], [2,3,8])      =>  True
([2,3,4], [4,-3,8])     =>  False

==============================================================================
---------------
 Exercise: 104
---------------

Write a Python program to find a number in a given matrix that is maximum in its column and minimum in its row.

Sample Input:
Original matrix: [[1, 2], [2, 3]]                   =>  2
Original matrix: [[1, 2, 3], [3, 4, 5]]             =>  3
Original matrix: [[7, 5, 6], [3, 4, 4], [6, 5, 7]]  =>  5

==============================================================================
---------------
 Exercise: 105
---------------

Write a Python program to check whether a given sequence is linear, quadratic or cubic.

Sequences are sets of numbers that are connected in some way.

Linear sequence:
A number pattern which increases or decreases by the same amount each time is called a linear sequence.
The amount it increases or decreases by is known as the common difference.
[First differences between consecutive elements are the same]

Quadratic sequence:
In quadratic sequence, the difference between each term increases, or decreases, at a constant rate.
[Second differences between consecutive elements are the same]

Cubic sequence:
Sequences where the 3rd difference are known as cubic sequence.
[Third differences between consecutive elements are the same]

Sample Output:
Original Sequence: [0, 2, 4, 6, 8, 10]          =>  Linear Sequence

Original Sequence: [1, 4, 9, 16, 25]            =>  Quadratic Sequence

Original Sequence: [0, 12, 10, 0, -12, -20]     =>  Cubic Sequence

Original Sequence: [1, 2, 3, 4, 5]              =>  Linear Sequence

==============================================================================
---------------
 Exercise: 106
---------------

Write a Python program to test whether a given integer is a Pandigital number or not.
From Wikipedia,
In mathematics, a pandigital number is an integer that in a given base has among its significant digits each digit
used in the base at least once.

For example,
1223334444555556666667777777888888889999999990 is a pandigital number in base 10.

The first few pandigital base 10 numbers are given by:
1023456789, 1023456798, 1023456879, 1023456897, 1023456978, 1023456987, 1023457689

1023456897  True
1023456798  True
1023457689  True
1023456789  True
102345679   False

==============================================================================
---------------
 Exercise: 107
---------------

Write a Python program to check whether a given number is "Oddish" or "Evenish".

A number is called "Oddish" if the sum of all of its digits is odd, and a number is called "Evenish" if the sum of all
of its digits is even.

Sample Output:
Original Number 120     =>  Oddish
Original Number 321     =>  Evenish
Original Number 43      =>  Oddish
Original Number 4433    =>  Evenish
Original Number 373     =>  Oddish

==============================================================================
---------------
 Exercise: 108
---------------

Write a Python program that takes three integers and checks whether the sum of the last digit of the first number
and the last digit of the third number equals the last digit of the second number.

Sample Input:
(12, 26, 44)        =>  True
(145, 122, 1010)    =>  False
(0, 20, 40)         =>  True
(1, 22, 40)         =>  False
(145, 129, 104)     =>  True

==============================================================================
---------------
 Exercise: 109
---------------

Write a Python program to find the indices of all occurrences of a given item in a given list.

Sample Input:
([1,2,3,4,5,2], 2)          =>  [1, 5]
([3,1,2,3,4,5,6,3,3], 3)    =>  [0, 3, 7, 8]
([1,2,3,-4,5,2,-4], -4)     =>  [3, 6]
([1, 2, 3, 4, 5, 2], 7)     =>  []

==============================================================================
---------------
 Exercise: 110
---------------

Write a Python program to remove duplicate numbers (all the occurrences) from a given list of numbers.

Sample Input:
([1,2,3,2,3,4,5])   =>  [1, 4, 5]
([1,2,3,2,4,5])     =>  [1, 3, 4, 5]
([1,2,3,4,5])       =>  [1, 2, 3, 4, 5]

==============================================================================
---------------
 Exercise: 111
---------------

Write a Python program which checks whether two circles in the same plane (with the same center (x,y) and radius)
intersect. If intersection occurs, return true, otherwise return false.

Sample Input: (center_x, center_y, radius)
([1,2, 4], [1,2, 8])        =>  True
([0,0, 2], [10,10, 5])      =>  False

==============================================================================
---------------
 Exercise: 112
---------------

Write a Python program to compute the digit distance between two integers.
The digit distance between two numbers is the absolute value of the difference of those numbers.
For example, the distance between 3 and -3 on the number line given by the |3 - (-3) | = |3 + 3 | = 6 units
Digit distance of 123 and 256 is
Since |1 - 2| + |2 - 5| + |3 - 6| = 1 + 3 + 3 = 7

Sample Input:
(123, 256)      =>  7
(23, 56)        =>  6
(1, 2)          =>  1
(24232, 45645)  =>  11

==============================================================================
---------------
 Exercise: 113
---------------

Write a Python program to reverse all words of even lengths.

Sample Input:
("The quick brown fox jumps over the lazy dog")     =>  The quick brown fox jumps revo the yzal dog
("Python Exercises")                                =>  nohtyP Exercises

==============================================================================
---------------
 Exercise: 114
---------------

Write a Python program to print letters from the English alphabet from a-z and A-Z.

a b c d e f g h i j k l m n o p q r s t u v w x y z
A B C D E F G H I J K L M N O P Q R S T U V W X Y Z

==============================================================================
---------------
 Exercise: 115
---------------

Write a Python program to generate and print a list of numbers from 1 to 10.

Sample Input:
range(1,10)

Sample Output:
[1, 2, 3, 4, 5, 6, 7, 8, 9]
['1', '2', '3', '4', '5', '6', '7', '8', '9']

==============================================================================
---------------
 Exercise: 116
---------------

Write a Python program to identify non-prime numbers between 1 and 100 (integers). Print the non-prime numbers.

Sample Input:
range(1, 101)

Sample Output:
Nonprime numbers between 1 to 100:
4
6
8
9
10
..
96
98
99
100

==============================================================================
---------------
 Exercise: 117
---------------

Write a Python program to make a request to a web page, and test the status code, and display the HTML code of
the specified web page.

Sample Output:
Web page status: <Response [200]>
HTML code of the above web page:
<!doctype html>
<html>
<head>
<title>Example Domain</title>
<meta charset="utf-8" />
<meta http-equiv="Content-type" content="text/html; charset=utf-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
</head>
<body>
<div>
<h1>Example Domain</h1>
<p>This domain is for use in illustrative examples in documents. You may use this
domain in literature without prior coordination or asking for permission.</p>
<p><a href="https://www.iana.org/domains/example">More information...</a></p>
</div>
</body>
</html>

==============================================================================
---------------
 Exercise: 118
---------------

In multiprocessing, processes are spawned by creating a Process object. Write a Python program to show the
individual process IDs (parent process, process ID etc.) involved.

Sample Output:
Main line
module name: __main__
parent process: 23967
process id: 27986
function f
module name: __main__
parent process: 27986
process id: 27987
hello bob

==============================================================================
---------------
 Exercise: 119
---------------

Two numbers are coprime if their highest common factor (or greatest common divisor if you must) is 1.
Write a Python program to check if two given numbers are Co Prime or not. Return True if two numbers are Co Prime
otherwise return false.

Sample Input:
(17, 13)    =>  True
(17, 21)    =>  True
(15, 21)    =>  False
(25, 45)    =>  False

==============================================================================
---------------
 Exercise: 120
---------------

Write a Python program to calculate Euclid's totient function for a given integer.
Use a primitive method to calculate Euclid's totient function.

The Euler's Totient Function counts the numbers lesser than a number say n that do not share any common positive
factor other than 1 with n or in other words are co-prime with n.

Sample Input:
(10)    =>  4
(15)    =>  8
(33)    =>  20

==============================================================================
---------------
 Exercise: 121
---------------

Write a Python program to create a coded string from a given string, using a specified formula.
Replace all 'P' with '9', 'T' with '0', 'S' with '1', 'H' with '6' and 'A' with '8'

Original string: PHP            =>  969
Original string: JAVASCRIPT     =>  J8V81CRI90

==============================================================================
---------------
 Exercise: 122
---------------

Write a Python program to check if a given string contains only lowercase or uppercase characters.

Original string: PHP            =>  True
Original string: javascript     =>  True
Original string: JavaScript     =>  False

==============================================================================
---------------
 Exercise: 123
---------------

Write a Python program to remove the first and last elements from a given string.

Original string: PHP        =>  H
Original string: Python     =>  ytho
Original string: JavaScript =>  avaScrip

==============================================================================
---------------
 Exercise: 124
---------------

Write a Python program to check if a given string contains two similar consecutive letters.

Original string: PHP    =>  False
Original string: PHHP   =>  True
Original string: PHPP   =>  True

==============================================================================
---------------
 Exercise: 125
---------------

Write a Python program to reverse a given string in lower case.

Original string: PHP        =>  php
Original string: JavaScript =>  tpircsavaj
Original string: PHPP       =>  pphp

==============================================================================
---------------
 Exercise: 126
---------------

Write a Python program to convert the letters of a given string (same case-upper/lower) into alphabetical order.

Original string: PHP            =>  HPP
Original string: javascript     =>  aacijprstv
Original string: python         =>  hnopty

==============================================================================
---------------
 Exercise: 127
---------------

Write a Python program to check whether the average value of the elements of a given array of numbers is a whole
number or not.

1 3 5 7 9       =>  True
2 4 2 6 4 8     =>  False

==============================================================================
---------------
 Exercise: 128
---------------

Write a Python program to remove all vowels from a given string.

Original string: Python     =>  Pythn
Original string: C Sharp    =>  C Shrp
Original string: JavaScript =>  JvScrpt

==============================================================================
---------------
 Exercise: 129
---------------

Write a Python program to get the index number of all lower case letters in a given string.

Original string: Python         =>  [1, 2, 3, 4, 5]
Original string: JavaScript     =>  [1, 2, 3, 5, 6, 7, 8, 9]
Original string: PHP            =>  []

==============================================================================
---------------
 Exercise: 130
---------------

Write a Python program to check whether a given month and year contains a Monday 13th.

Month No.: 11 Year: 2022       =>   False
Month No.: 6 Year: 2022        =>   True

==============================================================================
---------------
 Exercise: 131
---------------

Write a Python program to count the number of zeros and ones in the binary representation of a given integer.

Original number: 12     =>  Number of zeros: 2, Number of ones: 2
Original number: 1234   =>  Number of zeros: 6, Number of ones: 5

==============================================================================
---------------
 Exercise: 132
---------------

Write a Python program to find all the factors of a given natural number.
Factors:
The factors of a number are the numbers that divide into it exactly. The number 12 has six factors:
1, 2, 3, 4, 6 and 12 If 12 is divided by any of the six factors then the answer will be a whole number. For example:
12 / 3 = 4

Original Number: 1      =>  {1}
Original Number: 12     =>  {1, 2, 3, 4, 6, 12}
Original Number: 100    =>  {1, 2, 4, 100, 5, 10, 50, 20, 25}

==============================================================================
---------------
 Exercise: 133
---------------

Write a Python program to compute the sum of the negative and positive numbers in an array of integers and display the
largest sum.

Original array elements: {0, 15, 16, 17, -14, -13, -12, -11, -10, 18, 19, 20}   =>  105
Original array elements: {0, 3, 4, 5, 9, -22, -44, -11}                         =>  -77

==============================================================================
---------------
 Exercise: 134
---------------

Write a Python program that alternates the case of each letter in a given string, with the first letter in the string
being uppercase.

Original string: Python Exercises
    =>  PyThOn ExErCiSeS

Original string: C# is used to develop web apps, desktop apps, mobile apps, games and much more.
    => C# iS uSeD tO dEvElOp WeB aPpS, dEsKtOp ApPs, MoBiLe ApPs, GaMeS aNd MuCh MoRe.

==============================================================================
---------------
 Exercise: 135
---------------

Write a Python program that calculates the Least Common Multiple (LCM) of more than two numbers. The numbers should be
taken from a given list of positive integers.
From Wikipedia,
In arithmetic and number theory, the least common multiple, lowest common multiple, or smallest common multiple of two
integers a and b, usually denoted by lcm(a, b), is the smallest positive integer that is divisible by both a and b.
Since division of integers by zero is undefined, this definition has meaning only if a and b are both different from
zero. However, some authors define lcm(a,0) as 0 for all a, which is the result of taking the lcm to be the least
upper bound in the lattice of divisibility.

Original list elements: [4, 6, 8]                           =>  24
Original list elements: [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]     =>  2520
Original list elements: [48, 72, 108]                       =>  432

==============================================================================
---------------
 Exercise: 136
---------------

Write a Python program to reverse all words of odd lengths.

Original string: The quick brown fox jumps over the lazy dog    =>  ehT kciuq nworb xof spmuj over eht lazy god
Original string: Python Exercises                               =>  Python sesicrexE

==============================================================================
---------------
 Exercise: 137
---------------

Write a Python program to find the longest common ending between two given strings.

Original strings: running ruminating                =>  ing
Original strings: thisisatest testing123testing     =>  ""

==============================================================================
---------------
 Exercise: 138
---------------

Write a Python program to reverse the binary representation of a given number and convert the reversed binary number
into an integer.

Original number: 13     =>  11
Original number: 145    =>  137
Original number: 1342   =>  997

==============================================================================
---------------
 Exercise: 139
---------------

Write a Python program to find the closest palindrome number to a given integer. If there are two palindrome numbers
in absolute distance return the smaller number.

Note: An integer is a palindrome when it reads the same backward as forward. Negative numbers are not palindromic.

Original number: 120    =>  121
Original number: 321    =>  323
Original number: 43     =>  44
Original number: 1234   =>  1221

==============================================================================
---------------
 Exercise: 140
---------------

Write a Python program to convert all items in a given list to float values.

Original list:
[
'0.49', '0.54', '0.54', '0.54', '0.54', '0.54', '0.55', '0.54', '0.54', '0.54', '0.55', '0.55', '0.55', '0.54',
'0.55', '0.55', '0.54', '0.55', '0.55', '0.54'
]

List of Floats:
[0.49, 0.54, 0.54, 0.54, 0.54, 0.54, 0.55, 0.54, 0.54, 0.54, 0.55, 0.55, 0.55, 0.54, 0.55, 0.55, 0.54, 0.55, 0.55, 0.54]

==============================================================================
---------------
 Exercise: 141
---------------

Write a Python program to get the domain name using PTR DNS records from a given IP address.

What is a DNS PTR record?

The Domain Name System, or DNS, correlates domain names with IP addresses. A DNS pointer record (PTR for short) provides
 the domain name associated with an IP address. A DNS PTR record is exactly the opposite of the 'A' record, which
 provides the IP address associated with a domain name.

DNS PTR records are used in reverse DNS lookups. When a user attempts to reach a domain name in their browser, a DNS
lookup occurs, matching the domain name to the IP address. A reverse DNS lookup is the opposite of this process: it is
a query that starts with the IP address and looks up the domain name. Source: cloudflare.com

print(get_domain_name("8.8.8.8"))           =>  dns.google
print(get_domain_name("13.251.106.90"))     =>  ec2-13-251-106-90.ap-southeast-1.compute.amazonaws.com
print(get_domain_name("8.8.4.4"))           =>  dns.google
print(get_domain_name("23.23.212.126"))     =>ec2-23-23-212-126.compute-1.amazonaws.com

==============================================================================
---------------
 Exercise: 142
---------------

Write a Python program to check if every consecutive sequence of zeroes is followed by a consecutive sequence of ones
 of the same length in a given string. Return True/False.

Original sequence: 001011           =>  False
Original sequence: 01010101         =>  True
Original sequence: 00               =>  False
Original sequence: 000111000111     =>  True
Original sequence: 00011100011      =>  False
Original sequence: 0011101          =>  False

==============================================================================
---------------
 Exercise: 143
---------------

Write a Python program to print Emojis using Unicode characters or CLDR (Common Locale Data Repository) short names.

Note: The Common Locale Data Repository Project, often abbreviated as CLDR, is a project of the Unicode Consortium to
provide locale data in XML format for use in computer applications. CLDR contains locale-specific information that an
operating system will typically provide to applications.

unicode of Smiling face with heart-eyes: 0001F60D
unicode of Unamused face: 0001F612

==============================================================================
---------------
 Exercise: 144
---------------

Write a Python program to convert integer to string.

Sample Input:
language = "Python"
version = 3.6
sample Output:
Language: Python, Version: 3.6

==============================================================================
---------------
 Exercise: 145
---------------

Write a Python program to find the largest and smallest digits of a given number.

Original Number: 9387422
Largest Digit of the said number: 9
Smallest Digit of the said number: 2

Original Number: 500
Largest Digit of the said number: 5
Smallest Digit of the said number: 0

Original Number: 231548
Largest Digit of the said number: 8
Smallest Digit of the said number: 1

==============================================================================
---------------
 Exercise: 146
---------------

A Python list contains two positive integers. Write a Python program to check whether the cube root of the first
number is equal to the square root of the second number.

Sample Data:
([8, 4]) ->     True
([64, 16]) ->   True
([64, 36]) ->   False

==============================================================================
---------------
 Exercise: 147
---------------

A Python list contains three positive integers. Write a Python program to check whether the sum of the digits in
each number is equal or not. Return true otherwise false.

Sample Data:
([13, 4, 22]) -> True
([-13, 4, 22]) -> False
([45, 63, 90]) -> True

==============================================================================
---------------
 Exercise: 148
---------------

A Python list contains some positive integers. Write a Python program to count the numbers that are greater than
the previous number on the list.

Sample Data:
([1, 4, 7, 9, 11, 5]) -> 4
([1, 3, 3, 2, 2]) -> 1
([4, 3, 2, 1]) -> 0

==============================================================================
---------------
 Exercise: 149
---------------

Write a Python program that takes a positive integer and creates an N x N square filled with the integer N.
Display the N x N square.

Sample Data:
(2) -> [[2, 2], [2, 2]]
(5) -> [[5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5], [5, 5, 5, 5, 5]]
(-6) -> []

==============================================================================
---------------
 Exercise: 150
---------------

Write a Python program that takes a positive integer and calculates the cube root of the number until the number
is less than three. Count the number of steps to complete the task.

Sample Data:
(3) -> 1
(39) -> 2
(10000) -> 2

==============================================================================
