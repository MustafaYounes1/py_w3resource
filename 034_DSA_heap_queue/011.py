"""

Write a Python program to find the nth super-ugly number from a given prime list of size k using the heap queue
algorithm.

Super-ugly numbers are positive numbers whose all prime factors are in the given prime list. Given a number n, and a
list of primes, the task is to find the nth Super-Ugly number.

Note: the first Super-Ugly number is 1 by convention.

For example:
[1, 2, 4, 7, 8, 13, 14, 16, 19, 26, 28, 32] is the sequence of the first 12 super-ugly numbers given
primes = [2, 7, 13, 19].

[2, 5], 5                   =>  8
[2, 3, 5], 50               =>  243
[3, 5, 7, 11, 13], 9        =>  21

"""

from heapq import heappush, heappop


def nth_super_ugly(primes: list[int], n: int) -> int:
    """Get the nth super-ugly number based on the provided list of positive primes"""
    assert n > 0 and primes, "Invalid input"

    curr_su_number = -1  # store the current super-ugly number
    super_uglies = [1]  # store the super-ugly numbers in a priority queue, and 1 is the first super-ugly number

    # iterate to find the nth super-ugly number
    for _ in range(n):
        curr_su_number = heappop(super_uglies)  # get the smallest super-ugly number

        # every new super-ugly number can be formed by multiplying a previously found super-ugly number with one of
        # the given prime factors
        for prime in primes:
            heappush(super_uglies, prime * curr_su_number)  # insert the new super-ugly number

            # If the current ugly number is divisible by prime, do not consider higher primes to avoid duplicates
            # example consider the primes are: [2, 3, 5]
            # If curr_su_number is divisible by 2: Only multiply by 2. This is because numbers like curr_su_number * 3 or
            # curr_su_number * 5 would have been generated by smaller numbers (e.g., (curr_su_number/2) * 3 * 2).
            if curr_su_number % prime == 0:
                break

    return curr_su_number


def main():
    data = [
        [[2, 5], 5],
        [[2, 3, 5], 50],
        [[3, 5, 7, 11, 13], 9]
    ]

    for primes, n in data:
        print(nth_super_ugly(primes, n))


if __name__ == "__main__":
    main()
