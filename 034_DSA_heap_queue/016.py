"""

Write a Python program to find the nth ugly number using the heap queue algorithm.

Ugly numbers are positive numbers whose only prime factors are 2, 3 or 5.
The sequence 1, 2, 3, 4, 5, 6, 8, 9, 10, 12, ... shows the first 10 ugly numbers.
Note: 1 is typically treated as an ugly number.

7th Ugly number     =>  8
10th Ugly number    =>  12

"""

from heapq import heappop, heappush


def nth_ugly_number(n: int) -> int:
    assert n > 0, "invalid input"

    uglies, curr_ugly = [1], -1

    for _ in range(n):
        curr_ugly = heappop(uglies)

        for prime in [2, 3, 5]:
            heappush(uglies, prime * curr_ugly)

            # If the current ugly number is divisible by a prime, do not consider higher primes to avoid duplicates
            # Example: If curr_ugly is divisible by 2: Only multiply by 2. This is because numbers like curr_ugly * 3
            # or curr_ugly * 5 would have been generated by smaller numbers (e.g., (curr_ugly/2 = 1) * 3 * 2).
            if curr_ugly % prime == 0:
                break

    return curr_ugly


def main():
    print(nth_ugly_number(7))
    print(nth_ugly_number(10))


if __name__ == "__main__":
    main()
