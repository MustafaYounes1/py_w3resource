---------------
 Exercise: 001
---------------

Write a Python function to find the maximum of three numbers.

3, 6, -5        =>  6

==============================================================================
---------------
 Exercise: 002
---------------

Write a Python function to sum all the numbers in a list.

[8, 2, 3, 0, 7]     =>  20

==============================================================================
---------------
 Exercise: 003
---------------

Write a Python function to multiply all the numbers in a list.

[8, 2, 3, -1, 7]    =>  -336

==============================================================================
---------------
 Exercise: 004
---------------

Write a Python program to reverse a string.

"1234abcd"  =>  "dcba4321"

==============================================================================
---------------
 Exercise: 005
---------------

Write a Python function to calculate the factorial of a number (a non-negative integer).
The function accepts the number as an argument.

4   =>  24

==============================================================================
---------------
 Exercise: 006
---------------

Write a Python function to check whether a number falls within a given range.

5 in [3, 9[     =>  True

==============================================================================
---------------
 Exercise: 007
---------------

Write a Python function that accepts a string and counts the number of upper and lower case letters.

'The quick Brow Fox'

No. of Upper case characters : 3
No. of Lower case Characters : 12

==============================================================================
---------------
 Exercise: 008
---------------

Write a Python function that takes a list and returns a new list with distinct elements from the first list.

[1, 2, 3, 3, 3, 3, 4, 5]  => [1, 2, 3, 4, 5]

==============================================================================
---------------
 Exercise: 009
---------------

Write a Python function that takes a number as a parameter and checks whether the number is prime or not.

9   =>  False
47  =>  True
89  =>  True
91  =>  False

==============================================================================
---------------
 Exercise: 010
---------------

Write a Python program to print the even numbers from a given list.

[1, 2, 3, 4, 5, 6, 7, 8, 9]   =>  [2, 4, 6, 8]

==============================================================================
---------------
 Exercise: 011
---------------

Write a Python function to check whether a number is "Perfect" or not.

According to Wikipedia : In number theory, a perfect number is a positive integer that is equal to the sum of its
proper positive divisors, that is, the sum of its positive divisors excluding the number itself (also known as its
aliquot sum). Equivalently, a perfect number is a number that is half the sum of all of its positive divisors
(including itself).

Example : The first perfect number is 6, because 1, 2, and 3 are its proper positive divisors, and 1 + 2 + 3 = 6.
Equivalently, the number 6 is equal to half the sum of all its positive divisors: ( 1 + 2 + 3 + 6 ) / 2 = 6.
The next perfect number is 28 = 1 + 2 + 4 + 7 + 14. This is followed by the perfect numbers 496 and 8128.

3       =>  False
6       =>  True
28      =>  True
496     =>  True
8128    =>  True

==============================================================================
---------------
 Exercise: 012
---------------

Write a Python function that checks whether a passed string is a palindrome or not.
Note: A palindrome is a word, phrase, or sequence that reads the same backward as forward, e.g., madam or nurses run.

'aza'           =>  True
'madam'         =>  True
'nurses run'    =>  True

==============================================================================
---------------
 Exercise: 013
---------------

Write a Python function that prints out the first n rows of Pascal's triangle.
Note : Pascal's triangle is an arithmetic and geometric figure first imagined by Blaise Pascal.
Each number is the two numbers above it added together.

pascal_triangle(6)

[1]
[1, 1]
[1, 2, 1]
[1, 3, 3, 1]
[1, 4, 6, 4, 1]
[1, 5, 10, 10, 5, 1]

==============================================================================
---------------
 Exercise: 014
---------------

Write a Python function to check whether a string is a pangram or not.
Note : Pangrams are words or sentences containing every letter of the alphabet at least once.

"The quick brown fox jumps over the lazy dog"   =>  True

==============================================================================
---------------
 Exercise: 015
---------------

Write a Python program that accepts a hyphen-separated sequence of words as input and prints the words in a
hyphen-separated sequence after sorting them alphabetically.

green-red-yellow-black-white    =>  black-green-red-white-yellow

==============================================================================
---------------
 Exercise: 016
---------------

Write a Python function to create and print a list where the values are the squares of numbers between 1 and 20
(both included).

[1, 4, 9, 16, 25, 36, 49, 64, 81, 100, 121, 144, 169, 196, 225, 256, 289, 324, 361, 400]

==============================================================================
---------------
 Exercise: 017
---------------

Write a Python program to create a chain of function decorators (bold, italic, underline etc.).
    bold(s)         =>  <b>s</b>
    italic(s)       =>  <i>s</i>
    underline(s)    =>  <u>s</u>
    Perform it in the following order: Underline -> Italic -> Bold

hello   =>  <b><i><u>hello world</u></i></b>

==============================================================================
---------------
 Exercise: 018
---------------

Write a Python program to execute a string containing Python code.

def mutiply(x,y):
    return x*y

print('Multiply of 2 and 3 is: ',mutiply(2,3))

>   Multiply of 2 and 3 is:  6

==============================================================================
---------------
 Exercise: 019
---------------

Write a Python program to access a function inside a function.
    The first function should take an integer as an argument
    The second function should:
        take the same argument
        add 1 to the argument passed to first function
        return summation of both arguments

Use closures:
    Python closure is a nested function that allows us to access variables of the outer function even after the outer
    function is closed.

closure = create_closure(4)

print(closure(5))   =>  10
print(closure(3))   =>  8

==============================================================================
---------------
 Exercise: 020
---------------

Write a Python program to detect the number of local variables declared in a function.

def f() -> None:
    x = 1
    y = 2
    z = 3

>   3

==============================================================================
---------------
 Exercise: 021
---------------

Write a Python program that invokes a function after a specified period of time.
    You should write a function that takes in as arguments:
        the function to be delayed with its arguments
        the amount of delay in seconds

def greeting(n: str) -> str:
    return f"Hello {n}!"

print(delay(greeting, 5, "Mustafa"))
// The program should sleep for 5 seconds and then print the following //
Hello Mustafa!

==============================================================================
